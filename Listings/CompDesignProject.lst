C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     09/26/2017 16:14:56 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE COMPDESIGNPROJECT
OBJECT MODULE PLACED IN .\Objects\CompDesignProject.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE CompDesignProject.c LARGE BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\CompDe
                    -signProject.lst) OBJECT(.\Objects\CompDesignProject.obj)

line level    source

   1          /* Auth: Megan Bird
   2           * File: CompDesignProject.c
   3           * Course: CEEN-4330 – Microprocessor System Design – University of Nebraska-Lincoln
   4           * Lab: Project
   5           * Date: 3/14/2017
   6           * Desc: 8051 program with ROM, RAM, and I/O
   7           */
   8           
   9          #include <REGX55.H>
  10          #include <stdio.h>
  11          #include <absacc.h>
  12          
  13          // P1
  14          sbit P1_0 = P1^0;
  15          sbit P1_1 = P1^1;
  16          
  17          // P3
  18          sbit P3_0 = P3^0;
  19          sbit P3_1 = P3^1;
  20          sbit P3_2 = P3^2;
  21          sbit P3_3 = P3^3;
  22          sbit P3_4 = P3^4;
  23          sbit P3_5 = P3^5;
  24          sbit P3_6 = P3^6;
  25          sbit P3_7 = P3^7;
  26          
  27          // Keypad
  28          sbit kCol1  = P1^7;
  29          sbit kCol2  = P1^6;
  30          sbit kCol3  = P1^5;
  31          sbit kCol4  = P1^4;
  32          sbit kRow1  = P1^3;
  33          sbit kRow2  = P1^2;
  34          sbit kRow3  = P1^1;
  35          sbit kRow4  = P1^0;
  36          sbit cs_keypad = P3^1;          // latch
  37          sbit oe_keypad = P3^2;
  38          
  39          // Seven-Segment Display
  40          sfr sevenSegPort = 0x90;
  41          sbit cs_sevenSeg = P3^0;        // latch
  42          
  43          // LCD
  44          sbit cs_lcd = P3^3;                             // latch
  45          sbit rs_lcd = P3^4;                             // reg select
  46          sbit e_lcd  = P3^5;                             // enable
  47          // rw tied to ground to always enable read
  48          sfr lcdPort = 0x90;
  49          
  50          // ADC
  51          sbit oe_adc = P3^3;                             // latch output enable
  52          sbit wr_adc = P3^4;                             // WR line of ADC
  53          sfr adcPort = 0x90;
  54          
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     09/26/2017 16:14:56 PAGE 2   

  55          // RTC
  56          sbit rtc_data0 = P1^0;
  57          sbit rtc_data1 = P1^1;
  58          sbit rtc_data2 = P1^2;
  59          sbit rtc_data3 = P1^3;
  60          sbit rtc_add0 = P1^4;
  61          sbit rtc_add1 = P1^5;
  62          sbit rtc_add2 = P1^6;
  63          sbit rtc_add3 = P1^7;
  64          sfr rtcPort = 0x90;
  65          
  66          // Mission Control 1
  67          enum {ctrl_off,
  68                                  ctrl_ss_latch,
  69                                  ctrl_kp_oe,
  70                                  ctrl_kp_oelatch,
  71                                  ctrl_lcd_cmd_start,
  72                                  ctrl_lcd_cmd_finish,
  73                                  ctrl_lcd_data_start,
  74                                  ctrl_lcd_data_finish };
  75          
  76          // Mission Control 2
  77          enum {ctrl_adc_start = 1,
  78                                  ctrl_rtc_rd,
  79                                  ctrl_adc_finish,
  80                                  ctrl_rtc_cs1,
  81                                  ctrl_rtc_cs0 = 6,
  82                                  ctrl_rtc_wr };
  83          
  84          sbit dec0 = P3^3;
  85          sbit dec1 = P3^4;       // Rewired, GAL2 not in use             
  86          sbit dec2 = P3^2;       // Rewired, GAL2 not in use
  87          sbit dec3 = P3^3;
  88          sbit dec4 = P3^4;
  89          sbit dec5 = P3^5;
  90          
  91          // ======================= prototypes =========================== //
  92          
  93          typedef unsigned char byte;
  94          typedef unsigned short word;
  95          typedef enum { false, true } bool;
  96          
  97          struct keypad_data {
  98                  bool k1;
  99                  bool k2;
 100                  bool k3;
 101                  bool k4;
 102                  bool k5;
 103                  bool k6;
 104                  bool k7;
 105                  bool k8;
 106                  bool k9;
 107                  bool k0;
 108                  bool kA;
 109                  bool kB;
 110                  bool kC;
 111                  bool kD;
 112                  bool kstar;
 113                  bool kpound;
 114          };
 115          
 116          //------- high level prototyeps -------//
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     09/26/2017 16:14:56 PAGE 3   

 117          void mainMenu( void );
 118          void memoryMenu( void );
 119          void serialMenu( void );
 120          void dumpMenu( void );
 121          void moveMenu( void );
 122          void editMenu( void );
 123          void findMenu( void );
 124          
 125          word input4Hex( void );
 126          byte input2Hex( void );
 127          word inputHex( void );
 128          void waitForKeyRelease( void );
 129          
 130          //------- low level prototypes -------//
 131          void latchSevenSeg( void );
 132          void latchKeypad( void );
 133          void outputSevenSeg( char character );
 134          struct keypad_data getKeysPressed( void );
 135          void displayKeyPressed( struct keypad_data keypad );
 136          
 137          void lcdCmd( byte cmd );
 138          void lcdData( byte dat );
 139          void lcdInit( void );
 140          void lcdClear( void );
 141          void lcdChar( byte character );
 142          void lcdString( volatile char *string );
 143          void lcdLine( int line );
 144          void lcdHexWord( word hex );
 145          void lcdHexByte( byte hex );
 146          void lcdAsciiByte( byte hex );
 147          
 148          void missionControl1( int dec );
 149          void missionControl2( int dec );
 150          void msDelay( unsigned msecs );
 151          
 152          // ======================== main ================================ //
 153          
 154          void main(void) {
 155   1              
 156   1              missionControl1( ctrl_off );
 157   1              //missionControl2( ctrl_off );
 158   1              
 159   1              lcdInit();
 160   1              //rtcInit();
 161   1      
 162   1              mainMenu();             // Enter main program
 163   1      
 164   1              while(1); // Stay off the streets
 165   1      
 166   1      } // end main()
 167          
 168          // ======================= functions ============================ //
 169          
 170          void mainMenu( void ) { 
 171   1      
 172   1              struct keypad_data keypad;
 173   1      
 174   1              while(1) {
 175   2      
 176   2                      char MenuStr1[] = "Megan Bird CEEN 4330`";
 177   2                      char MenuStr2[] = "--------------------`";
 178   2                      char MenuStr3[] = "Main Menu`";
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     09/26/2017 16:14:56 PAGE 4   

 179   2                      char MenuStr4[] = "1: Memory  2: Serial`";
 180   2              
 181   2                      lcdClear();
 182   2                      lcdString( &MenuStr1 );
 183   2                      lcdLine(2);
 184   2                      lcdString( &MenuStr2 );
 185   2                      lcdLine(3);
 186   2                      lcdString( &MenuStr3 );
 187   2                      lcdLine(4);
 188   2                      lcdString( &MenuStr4 );
 189   2              
 190   2                      while(1) {      
 191   3                              keypad = getKeysPressed();
 192   3                      
 193   3                              if( keypad.k1 == true ) {
 194   4                                      waitForKeyRelease();
 195   4                                      memoryMenu();
 196   4                                      break;
 197   4                              }
 198   3                              else if( keypad.k2 == true ) {
 199   4                                      waitForKeyRelease();
 200   4                                      serialMenu();
 201   4                                      break;
 202   4                              }
 203   3                      } // end option while
 204   2      
 205   2              } // end main while
 206   1      
 207   1      } // end choiceMainMenu()
 208          
 209          // -------------------------------------------------------------- //
 210          
 211          void serialMenu( void ) {
 212   1      
 213   1              struct keypad_data keypad;
 214   1              bool exit = false;
 215   1              word baud_rate = 0x0000;
 216   1              bool parity_even = false;
 217   1              bool stop_bits_one = false;
 218   1              word tx_string = 0x0000;
 219   1              int i = 0;
 220   1      
 221   1              while( exit == false ) {
 222   2      
 223   2                      char MenuStr1[] = "Serial Setup`";
 224   2                      char MenuStr2[] = "--------------------`";
 225   2                      char MenuStr3[] = "Baud Rate: `";
 226   2                      char MenuStr4[] = " 1200 2400 4800 9600`";
 227   2                      char MenuStr5[] = "Parity: `";
 228   2                      char MenuStr6[] = " 1: Odd     2: Even `";
 229   2                      char MenuStr7[] = "                    `";
 230   2                      char MenuStr8[] = "Even`";
 231   2                      char MenuStr9[] = "Odd`";
 232   2                      char MenuStr10[]= "Stop Bits: `";
 233   2                      char MenuStr11[]= "1`";
 234   2                      char MenuStr12[]= "2`";
 235   2                      char MenuStr14[]= "Enter 4 chars for TX`";
 236   2                      char MenuStr15[]= "Chars transmitted   `";
 237   2                      char MenuStr16[]= "# : Return to Main  `";
 238   2              
 239   2                      lcdClear();
 240   2                      lcdString( &MenuStr1 );
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     09/26/2017 16:14:56 PAGE 5   

 241   2                      lcdLine(2);
 242   2                      lcdString( &MenuStr2 );
 243   2      
 244   2                      // baud prompt
 245   2                      while( (baud_rate != 0x1200) && (baud_rate != 0x2400) && (baud_rate != 0x4800) && (baud_rate != 0x9600))
             - {
 246   3                              lcdLine(4);
 247   3                              lcdString( &MenuStr4 );
 248   3                              lcdLine(3);
 249   3                              lcdString( &MenuStr7 );
 250   3                              lcdLine(3);
 251   3                              lcdString( &MenuStr3 );
 252   3                              baud_rate = input4Hex();
 253   3                      } // end baud rate input
 254   2      
 255   2                      // parity prompt
 256   2                      lcdLine(4);
 257   2                      lcdString( &MenuStr6 );
 258   2                      lcdLine(3);
 259   2                      lcdString( &MenuStr7 );
 260   2                      lcdLine(3);
 261   2                      lcdString( &MenuStr5 );
 262   2                      while(1) {      
 263   3                              keypad = getKeysPressed();
 264   3                      
 265   3                              if( keypad.k1 == true ) {
 266   4                                      waitForKeyRelease();
 267   4                                      parity_even = false;
 268   4                                      lcdString( &MenuStr9 ); 
 269   4                                      msDelay(500);
 270   4                                      break;
 271   4                              }
 272   3                              else if( keypad.k2 == true ) {
 273   4                                      waitForKeyRelease();
 274   4                                      parity_even = true;
 275   4                                      lcdString( &MenuStr8 );
 276   4                                      msDelay(500);
 277   4                                      break;
 278   4                              }
 279   3                      } // end parity while
 280   2      
 281   2                      // stop bit prompt
 282   2                      lcdLine(4);
 283   2                      lcdString( &MenuStr7 );
 284   2                      lcdLine(3);
 285   2                      lcdString( &MenuStr7 );
 286   2                      lcdLine(3);
 287   2                      lcdString( &MenuStr10 );
 288   2                      while(1) {      
 289   3                              keypad = getKeysPressed();
 290   3                      
 291   3                              if( keypad.k1 == true ) {
 292   4                                      waitForKeyRelease();
 293   4                                      stop_bits_one = true;
 294   4                                      lcdString( &MenuStr11 ); 
 295   4                                      msDelay(1000);
 296   4                                      break;
 297   4                              }
 298   3                              else if( keypad.k2 == true ) {
 299   4                                      waitForKeyRelease();
 300   4                                      stop_bits_one = false;
 301   4                                      lcdString( &MenuStr12 );
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     09/26/2017 16:14:56 PAGE 6   

 302   4                                      msDelay(1000);
 303   4                                      break;
 304   4                              }
 305   3                      } // end stop bit while
 306   2      
 307   2                      // characters prompt
 308   2                      lcdClear();
 309   2                      lcdString( &MenuStr14 );
 310   2                      lcdLine(2);
 311   2                      tx_string = input4Hex();
 312   2      
 313   2                      // transmit string
 314   2                      TMOD = 0x20;    // Use Timer 1, 8-bit auto-reload
 315   2                      switch (baud_rate) {
 316   3                               case (0x1200): TH1 = 0xE8;
 317   3                               case (0x2400): TH1 = 0xF4;
 318   3                               case (0x4800): TH1 = 0xFA;
 319   3                               case (0x9600): TH1 = 0xFD;
 320   3                      } // end baud rate switch
 321   2                      SCON = 0xC0;
 322   2                      TR1 = 1;
 323   2                      for (i = 0; i < 4; i++) {
 324   3                              SBUF = 0x01;
 325   3                              while(TI==0);
 326   3                              TI = 0;
 327   3                      } // end transmit loop
 328   2      
 329   2                      // transmit complete
 330   2                      lcdLine(3);
 331   2                      lcdString( &MenuStr15 );
 332   2                      lcdLine(4);
 333   2                      lcdString( &MenuStr16 );
 334   2      
 335   2                      while(1) {      
 336   3                              keypad = getKeysPressed();
 337   3              
 338   3                              if( keypad.kpound == true ) {
 339   4                                      exit = true;
 340   4                                      waitForKeyRelease();
 341   4                                      break;
 342   4                              }
 343   3                      } // end option while
 344   2              } // end main while
 345   1      
 346   1      } // end seerialMenu()
 347          // -------------------------------------------------------------- //
 348          
 349          void memoryMenu( void ) {
 350   1      
 351   1              struct keypad_data keypad;
 352   1              bool exit = false;
 353   1      
 354   1              while( exit == false ) {
 355   2      
 356   2                      char MenuStr1[] = "Memory Menu`";
 357   2                      char MenuStr2[] = "1 : Dump    2 : Move`";
 358   2                      char MenuStr3[] = "3 : Edit    4 : Find`";
 359   2                      char MenuStr4[] = "# : Return to Main  `";
 360   2              
 361   2                      lcdClear();
 362   2                      lcdString( &MenuStr1 );
 363   2                      lcdLine(2);
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     09/26/2017 16:14:56 PAGE 7   

 364   2                      lcdString( &MenuStr2 );
 365   2                      lcdLine(3);
 366   2                      lcdString( &MenuStr3 );
 367   2                      lcdLine(4);
 368   2                      lcdString( &MenuStr4 );
 369   2              
 370   2                      while(1) {      
 371   3                              keypad = getKeysPressed();
 372   3                      
 373   3                              if( keypad.kpound == true ) {
 374   4                                      exit = true;
 375   4                                      waitForKeyRelease();
 376   4                                      break;
 377   4                              }
 378   3                              else if( keypad.k1 == true ) {
 379   4                                      waitForKeyRelease();
 380   4                                      dumpMenu();
 381   4                                      break;
 382   4                              }
 383   3                              else if( keypad.k2 == true ) {
 384   4                                      waitForKeyRelease();
 385   4                                      moveMenu();
 386   4                                      break;
 387   4                              }
 388   3                              else if( keypad.k3 == true ) {
 389   4                                      waitForKeyRelease();
 390   4                                      editMenu();
 391   4                                      break;
 392   4                              }
 393   3                              else if( keypad.k4 == true ) {
 394   4                                      waitForKeyRelease();
 395   4                                      findMenu();
 396   4                                      break;
 397   4                              }
 398   3                      } // end option while
 399   2      
 400   2              } // end main while
 401   1      
 402   1      } // end memoryMenu()
 403          // -------------------------------------------------------------- //
 404          
 405          void dumpMenu( void ) {
 406   1      
 407   1              struct keypad_data keypad;
 408   1              bool exit;
 409   1              word segment;
 410   1              word block;
 411   1              word offset;
 412   1              byte memVal;
 413   1              int i;
 414   1              
 415   1              char MenuStr1[] = "Dump Setup`";
 416   1              char MenuStr2[] = "Start Seg Addr: `";
 417   1              char MenuStr3[] = "Block Size: `";
 418   1              char MenuStr4[] = "1:<--  2:-->  #:Exit`";
 419   1      
 420   1              exit = false;
 421   1              segment = 0x0000;
 422   1              block = 0x0000;
 423   1              offset = 0x0000;
 424   1      
 425   1              //----------------//
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     09/26/2017 16:14:56 PAGE 8   

 426   1              //   Dump Setup   //
 427   1              //----------------//
 428   1      
 429   1              // print header and footer
 430   1              lcdClear();
 431   1              lcdString( &MenuStr1 );
 432   1      
 433   1              // address prompt
 434   1              lcdLine(3);
 435   1              lcdString( &MenuStr2 );
 436   1              // read 4 hex digits from keypad
 437   1              segment = input4Hex(); 
 438   1      
 439   1              // block size prompt
 440   1              lcdLine(4);
 441   1              lcdString( &MenuStr3 );
 442   1              // read 4 hex digits from keypad
 443   1              while( block == 0x0000 ) {
 444   2                      block = input4Hex();
 445   2              }
 446   1      
 447   1              //------------------//
 448   1              //   Dump Display   //
 449   1              //------------------//
 450   1      
 451   1              while( exit == false ) {
 452   2      
 453   2                      // print segment:offset
 454   2                      lcdClear();
 455   2                      lcdHexWord( segment );
 456   2                      lcdChar(':');
 457   2                      lcdHexWord( offset );
 458   2      
 459   2                      // print hex values
 460   2                      lcdLine(2);
 461   2                      for( i = 0; i < 7; i++ ) {
 462   3                              if( (offset + i) < block ) {
 463   4                                      memVal = XBYTE[ (segment * 16) + offset + i ]; // get seg:offset+i
 464   4                                      lcdHexByte( memVal );   // print value
 465   4                                      if( i < 6 ) {
 466   5                                              lcdChar(' ');           // print space if not last one on line
 467   5                                      }
 468   4                              }
 469   3                      }
 470   2      
 471   2                      // print ascii values
 472   2                      lcdLine(3);
 473   2                      for( i = 0; i < 7; i++ ) {
 474   3                              if( (offset + i) < block ) {
 475   4                                      memVal = XBYTE[ (segment * 16) + offset + i ]; // get seg:offset+i
 476   4                                      lcdAsciiByte( memVal ); // print value
 477   4                                      lcdChar(' ');
 478   4                                      if( i < 6 ) {
 479   5                                              lcdChar(' ');           // print space if not last one on line
 480   5                                      }
 481   4                              }
 482   3                      }
 483   2      
 484   2                      // print footer
 485   2                      lcdLine(4);
 486   2                      lcdString( &MenuStr4 );         
 487   2                              
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     09/26/2017 16:14:56 PAGE 9   

 488   2                      while(1) {      
 489   3                              keypad = getKeysPressed();
 490   3                      
 491   3                              if( keypad.kpound == true ) {
 492   4                                      exit = true;
 493   4                                      waitForKeyRelease();
 494   4                                      break;
 495   4                              }
 496   3                              else if( keypad.k1 == true ) {
 497   4                                      waitForKeyRelease();
 498   4                                      // if decremented offset is less than start (0),
 499   4                                      if( offset >= 7 ) {
 500   5                                              //      revert (-7) and do nothing
 501   5                                              offset -= 7;
 502   5                                      }
 503   4                                      break;
 504   4                              }
 505   3                              else if( keypad.k2 == true ) {
 506   4                                      waitForKeyRelease();
 507   4                                      // increment offset by 7
 508   4                                      offset += 7;
 509   4                                      // if incremented offset is past block size,
 510   4                                      if( offset > block ) {
 511   5                                              //      revert (-7) and do nothing
 512   5                                              offset -= 7;
 513   5                                      }
 514   4                                      break;
 515   4                              }
 516   3                      } // end option while
 517   2      
 518   2              } // end main while
 519   1      
 520   1      } // end dumpMenu()
 521          
 522          // -------------------------------------------------------------- //
 523          
 524          void moveMenu( void ) {
 525   1      
 526   1              struct keypad_data keypad;
 527   1              bool exit;
 528   1              word sourceSegment;
 529   1              word destSegment;
 530   1              word block;
 531   1              word offset;
 532   1              byte memVal;
 533   1              int i;
 534   1              
 535   1              char MenuStr1[] = "Move Setup`";
 536   1              char MenuStr2[] = "Source Seg Addr: `";
 537   1              char MenuStr3[] = "Dest Seg Addr: `";
 538   1              char MenuStr4[] = "Block Size: `";
 539   1              char MenuStr5[] = "Move Complete`";
 540   1              char MenuStr6[] = "#:Exit`";
 541   1      
 542   1              exit = false;
 543   1              sourceSegment = 0x0000;
 544   1              destSegment = 0x0000;
 545   1              block = 0x0000;
 546   1              offset = 0x0000;
 547   1              i = 0;
 548   1      
 549   1              //----------------//
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     09/26/2017 16:14:56 PAGE 10  

 550   1              //   Move Setup   //
 551   1              //----------------//
 552   1      
 553   1              // print header and footer
 554   1              lcdClear();
 555   1              lcdString( &MenuStr1 );
 556   1      
 557   1              // source address prompt
 558   1              lcdLine(2);
 559   1              lcdString( &MenuStr2 );
 560   1              // read 4 hex digits from keypad
 561   1              sourceSegment = input4Hex(); 
 562   1      
 563   1              // dest address prompt
 564   1              lcdLine(3);
 565   1              lcdString( &MenuStr3 );
 566   1              // read 4 hex digits from keypad
 567   1              destSegment = input4Hex();
 568   1      
 569   1              // block size prompt
 570   1              lcdLine(4);
 571   1              lcdString( &MenuStr4 );
 572   1              // read 4 hex digits from keypad
 573   1              while( block == 0x0000 ) {
 574   2                      block = input4Hex();
 575   2              }
 576   1      
 577   1              //------------------//
 578   1              //   Move Display   //
 579   1              //------------------//
 580   1      
 581   1              while( exit == false ) {
 582   2      
 583   2                      // print segment:offset
 584   2                      lcdClear();
 585   2                      lcdString( &MenuStr5 );
 586   2                      lcdLine(4);
 587   2                      lcdString( &MenuStr6 );
 588   2      //              lcdHexWord( segment );
 589   2      //              lcdChar(':');
 590   2      //              lcdHexWord( offset );
 591   2                      
 592   2      
 593   2                      // perform move
 594   2                      while( (offset + i) < block ) {
 595   3                              memVal = XBYTE[ (sourceSegment * 16) + offset + i ]; // get sourceSeg:offset+i
 596   3                              XBYTE[ (destSegment * 16) + offset + i ] = memVal;      // move to destSeg:offset+i
 597   3                              i++;
 598   3                      }       
 599   2                              
 600   2                      while(1) {      
 601   3                              keypad = getKeysPressed();
 602   3                      
 603   3                              if( keypad.kpound == true ) {
 604   4                                      exit = true;
 605   4                                      waitForKeyRelease();
 606   4                                      break;
 607   4                              }
 608   3      
 609   3                      } // end option while
 610   2      
 611   2              } // end main while
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     09/26/2017 16:14:56 PAGE 11  

 612   1      
 613   1      } // end moveMenu()
 614          
 615          // -------------------------------------------------------------- //
 616          
 617          void editMenu( void ) {
 618   1      
 619   1              struct keypad_data keypad;
 620   1              bool exit;
 621   1              bool next;
 622   1              word segment;
 623   1              word offset;
 624   1              byte new_value;
 625   1              byte memVal;
 626   1              
 627   1              char MenuStr1[] = "Edit Setup`";
 628   1              char MenuStr2[] = "Segment Addr: `";
 629   1              char MenuStr3[] = "Offset Addr: `";
 630   1              char MenuStr4[] = "New Value: `";
 631   1              char MenuStr5[] = "Edit Complete`";
 632   1              char MenuStr6[] = "0:Continue    #:Exit`";
 633   1      
 634   1              exit = false;
 635   1              next = true;
 636   1              segment = 0x0000;
 637   1              offset = 0x0000;
 638   1              new_value = 0xAA;
 639   1      
 640   1              //----------------//
 641   1              //   Edit Setup   //
 642   1              //----------------//
 643   1      
 644   1              // print header and footer
 645   1              lcdClear();
 646   1              lcdString( &MenuStr1 );
 647   1      
 648   1              // segment address prompt
 649   1              lcdLine(2);
 650   1              lcdString( &MenuStr2 );
 651   1              // read 4 hex digits from keypad
 652   1              segment = input4Hex(); 
 653   1      
 654   1              // offset address prompt
 655   1              lcdLine(3);
 656   1              lcdString( &MenuStr3 );
 657   1              // read 4 hex digits from keypad
 658   1              offset = input4Hex();
 659   1              
 660   1              //------------------//
 661   1              //   Edit Display   //
 662   1              //------------------//
 663   1      
 664   1              while( exit == false ) {
 665   2      
 666   2                      if( next == true ) {
 667   3      
 668   3                              // print segment:offset
 669   3                              lcdClear();
 670   3                              lcdHexWord( segment );
 671   3                              lcdChar(':');
 672   3                              lcdHexWord( offset );
 673   3                              lcdChar(' ');
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     09/26/2017 16:14:56 PAGE 12  

 674   3      
 675   3                              // print current value
 676   3                              memVal = XBYTE[ (segment * 16) + offset ]; // get seg:offset
 677   3                              lcdHexByte( memVal );   // print value
 678   3                      
 679   3                              // new value prompt
 680   3                              lcdLine(2);
 681   3                              lcdString( &MenuStr4 );
 682   3                      
 683   3                              // read 2 hex digits from keypad
 684   3                              new_value = input2Hex();
 685   3                              // store value
 686   3                              XBYTE[ (segment * 16) + offset ] = new_value;   // move to destSeg:offset
 687   3                      
 688   3                              // edit complete
 689   3                              lcdLine(3);
 690   3                              lcdString( &MenuStr5 );
 691   3                      
 692   3                              // exit prompt
 693   3                              lcdLine(4);
 694   3                              lcdString( &MenuStr6 );
 695   3      
 696   3                              offset++;
 697   3      
 698   3                      } // end next if
 699   2                              
 700   2                      while(1) {      
 701   3      
 702   3                              keypad = getKeysPressed();
 703   3                      
 704   3                              if( keypad.kpound == true ) {
 705   4                                      next = false;
 706   4                                      exit = true;
 707   4                                      waitForKeyRelease();
 708   4                                      break;
 709   4                              }
 710   3      
 711   3                              if( keypad.k0 == true ) {
 712   4                                      next = true;
 713   4                                      waitForKeyRelease();
 714   4                                      break;
 715   4                              }
 716   3      
 717   3                      } // end option while
 718   2      
 719   2              } // end main while
 720   1      
 721   1      } // end editMenu()
 722          
 723          // -------------------------------------------------------------- //
 724          
 725          void findMenu( void ) {
 726   1      
 727   1              struct keypad_data keypad;
 728   1              bool exit;
 729   1              bool found;
 730   1              word segment;
 731   1              word offset;
 732   1              word block;
 733   1              byte search_value;
 734   1              byte memVal;
 735   1              
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     09/26/2017 16:14:56 PAGE 13  

 736   1              char MenuStr1[] = "Find Setup`";
 737   1              char MenuStr2[] = "Start Seg Addr: `";
 738   1              char MenuStr3[] = "Block Size: `";
 739   1              char MenuStr4[] = "Search Value: `";
 740   1              char MenuStr5[] = "Value found at`";
 741   1              char MenuStr6[] = "Value not found!`";
 742   1              char MenuStr7[] = "#:Exit`";
 743   1      
 744   1              exit = false;
 745   1              found = false;
 746   1              segment = 0x0000;
 747   1              offset = 0x0000;
 748   1              block = 0x0000;
 749   1              search_value = 0xAA;
 750   1      
 751   1              //----------------//
 752   1              //   Find Setup   //
 753   1              //----------------//
 754   1      
 755   1              // print header and footer
 756   1              lcdClear();
 757   1              lcdString( &MenuStr1 );
 758   1      
 759   1              // start address prompt
 760   1              lcdLine(2);
 761   1              lcdString( &MenuStr2 );
 762   1              // read 4 hex digits from keypad
 763   1              segment = input4Hex(); 
 764   1      
 765   1              // block size prompt
 766   1              lcdLine(3);
 767   1              lcdString( &MenuStr3 );
 768   1              // read 4 hex digits from keypad
 769   1              block = input4Hex();
 770   1      
 771   1              // search value prompt
 772   1              lcdLine(4);
 773   1              lcdString( &MenuStr4 );
 774   1              // read 4 hex digits from keypad
 775   1              search_value = input2Hex();
 776   1              
 777   1              //------------------//
 778   1              //   Find Display   //
 779   1              //------------------//
 780   1      
 781   1              // search block for value
 782   1              while( (offset) < block ) {
 783   2                      memVal = XBYTE[ (segment * 16) + offset ]; // get seg:offset+i
 784   2                      if( memVal == search_value ) {
 785   3                         found = true;
 786   3                         break;
 787   3                      }
 788   2                      offset++;
 789   2              }
 790   1      
 791   1              // print result
 792   1              lcdClear();
 793   1              if( found == true ) {
 794   2                      // Value found at ...
 795   2                      lcdString( &MenuStr5 );
 796   2                      // print segment:offset
 797   2                      lcdLine(2);
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     09/26/2017 16:14:56 PAGE 14  

 798   2                      lcdHexWord( segment );
 799   2                      lcdChar(':');
 800   2                      lcdHexWord( offset );
 801   2                      // Footer
 802   2                      lcdLine(4);
 803   2                      lcdString( &MenuStr7 );
 804   2              }
 805   1              else {
 806   2                      // Value not found
 807   2                      lcdString( &MenuStr6 );
 808   2                      // Footer
 809   2                      lcdLine(4);
 810   2                      lcdString( &MenuStr7 );
 811   2              }
 812   1      
 813   1              while( exit == false ) {
 814   2                              
 815   2                      while(1) {      
 816   3      
 817   3                              keypad = getKeysPressed();
 818   3                      
 819   3                              if( keypad.kpound == true ) {
 820   4                                      exit = true;
 821   4                                      waitForKeyRelease();
 822   4                                      break;
 823   4                              }
 824   3      
 825   3                      } // end option while
 826   2      
 827   2              } // end main while
 828   1      
 829   1      } // end findMenu()
 830          
 831          // -------------------------------------------------------------- //
 832          
 833          word input4Hex( void ) {
 834   1      
 835   1              word segment;
 836   1              word input;
 837   1              int i;
 838   1              
 839   1              segment = 0x0000;
 840   1      
 841   1              for( i = 0; i < 4; i++ ) {
 842   2                      segment = segment << 4;
 843   2                      input = inputHex();
 844   2                      segment = segment + input;
 845   2              }
 846   1         
 847   1              return segment;
 848   1      
 849   1      } // end input4Hex()
 850          
 851          // -------------------------------------------------------------- //
 852          
 853          byte input2Hex( void ) {
 854   1      
 855   1              byte value;
 856   1              word input;
 857   1              int i;
 858   1              
 859   1              value = 0x00;
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     09/26/2017 16:14:56 PAGE 15  

 860   1      
 861   1              for( i = 0; i < 2; i++ ) {
 862   2                      value = value << 4;
 863   2                      input = inputHex();
 864   2                      value = value + input;
 865   2              }
 866   1         
 867   1              return value;
 868   1      
 869   1      } // end input2Hex()
 870          
 871          // -------------------------------------------------------------- //
 872          
 873          word inputHex( void ) {
 874   1      
 875   1              struct keypad_data keypad;
 876   1              word value;
 877   1              byte ascii;
 878   1              
 879   1              
 880   1              value = 0xFFFF;
 881   1              ascii = 0x7E;
 882   1              
 883   1              while( value == 0xFFFF ) {
 884   2                
 885   2                      keypad = getKeysPressed();
 886   2      
 887   2                      if( keypad.k0 == true ) {
 888   3                              value = 0x0000;
 889   3                              ascii = 0x30;
 890   3                      }
 891   2                      if( keypad.k1 == true ) {
 892   3                              value = 0x0001;
 893   3                              ascii = 0x31;
 894   3                      }
 895   2                      if( keypad.k2 == true ) {
 896   3                              value = 0x0002;
 897   3                              ascii = 0x32;
 898   3                      }
 899   2                      if( keypad.k3 == true ) {
 900   3                              value = 0x0003;
 901   3                              ascii = 0x33;
 902   3                      }
 903   2                      if( keypad.k4 == true ) {
 904   3                              value = 0x0004;
 905   3                              ascii = 0x34;
 906   3                      }
 907   2                      if( keypad.k5 == true ) {
 908   3                              value = 0x0005;
 909   3                              ascii = 0x35;
 910   3                      }
 911   2                      if( keypad.k6 == true ) {
 912   3                              value = 0x0006;
 913   3                              ascii = 0x36;
 914   3                      }
 915   2                      if( keypad.k7 == true ) {
 916   3                              value = 0x0007;
 917   3                              ascii = 0x37;
 918   3                      }
 919   2                      if( keypad.k8 == true ) {
 920   3                              value = 0x0008;
 921   3                              ascii = 0x38;
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     09/26/2017 16:14:56 PAGE 16  

 922   3                      }
 923   2                      if( keypad.k9 == true ) {
 924   3                              value = 0x0009;
 925   3                              ascii = 0x39;
 926   3                      }
 927   2                      if( keypad.kA == true ) {
 928   3                              value = 0x000A;
 929   3                              ascii = 0x41;
 930   3                      }
 931   2                      if( keypad.kB == true ) {
 932   3                              value = 0x000B;
 933   3                              ascii = 0x42;
 934   3                      }
 935   2                      if( keypad.kC == true ) {
 936   3                              value = 0x000C;
 937   3                              ascii = 0x43;
 938   3                      }
 939   2                      if( keypad.kD == true ) {
 940   3                              value = 0x000D;
 941   3                              ascii = 0x44;
 942   3                      }
 943   2                      if( keypad.kstar == true ) {
 944   3                              value = 0x000E;
 945   3                              ascii = 0x45;
 946   3                      }
 947   2                      if( keypad.kpound == true ) {
 948   3                              value = 0x000F;
 949   3                              ascii = 0x46;
 950   3                      }
 951   2      
 952   2              } // end while
 953   1      
 954   1              lcdChar( ascii );
 955   1      
 956   1              waitForKeyRelease();
 957   1              return value;   
 958   1      
 959   1      } // end readHex()
 960          
 961          // -------------------------------------------------------------- //
 962          
 963          void waitForKeyRelease( void ) {
 964   1      
 965   1              struct keypad_data keypad;
 966   1              bool exit = false;
 967   1              
 968   1              while( exit == false ) {
 969   2      
 970   2                      exit = true;
 971   2                      keypad = getKeysPressed();
 972   2      
 973   2                      if( keypad.k0 == true ) {
 974   3                              exit = false;
 975   3                      }
 976   2                      if( keypad.k1 == true ) {
 977   3                              exit = false;
 978   3                      }
 979   2                      if( keypad.k2 == true ) {
 980   3                              exit = false;
 981   3                      }
 982   2                      if( keypad.k3 == true ) {
 983   3                              exit = false;
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     09/26/2017 16:14:56 PAGE 17  

 984   3                      }
 985   2                      if( keypad.k4 == true ) {
 986   3                              exit = false;
 987   3                      }
 988   2                      if( keypad.k5 == true ) {
 989   3                              exit = false;
 990   3                      }
 991   2                      if( keypad.k6 == true ) {
 992   3                              exit = false;
 993   3                      }
 994   2                      if( keypad.k7 == true ) {
 995   3                              exit = false;
 996   3                      }
 997   2                      if( keypad.k8 == true ) {
 998   3                              exit = false;
 999   3                      }
1000   2                      if( keypad.k9 == true ) {
1001   3                              exit = false;
1002   3                      }
1003   2                      if( keypad.kA == true ) {
1004   3                              exit = false;
1005   3                      }
1006   2                      if( keypad.kB == true ) {
1007   3                              exit = false;
1008   3                      }
1009   2                      if( keypad.kC == true ) {
1010   3                              exit = false;
1011   3                      }
1012   2                      if( keypad.kD == true ) {
1013   3                              exit = false;
1014   3                      }
1015   2                      if( keypad.kstar == true ) {
1016   3                              exit = false;
1017   3                      }
1018   2                      if( keypad.kpound == true ) {
1019   3                              exit = false;
1020   3                      }
1021   2      
1022   2              } // end while
1023   1              
1024   1              msDelay(100);     
1025   1      
1026   1      } // end waitForKeyRelease()
1027          
1028          // -------------------------------------------------------------- //
1029          
1030          void latchSevenSeg( void ) {
1031   1              
1032   1      //      cs_sevenSeg = 1;
1033   1      //      cs_sevenSeg = 0;
1034   1              
1035   1              missionControl1( ctrl_ss_latch );
1036   1              missionControl1( ctrl_off );
1037   1              
1038   1      } // end latchSevenSeg()
1039          
1040          // -------------------------------------------------------------- //
1041          
1042          void latchKeypad( void ) {
1043   1              
1044   1      //      cs_keypad = 1;
1045   1      //      cs_keypad = 0;
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     09/26/2017 16:14:56 PAGE 18  

1046   1              
1047   1              missionControl1( ctrl_kp_oelatch );
1048   1              missionControl1( ctrl_kp_oe );
1049   1              
1050   1      } // end latchKeypad()
1051          
1052          
1053          // -------------------------------------------------------------- //
1054          
1055          void outputSevenSeg( char character ) {
1056   1              
1057   1              switch( character ) {
1058   2                      case '0': sevenSegPort = ~0x3F; break;
1059   2                      case '1': sevenSegPort = ~0x06; break;
1060   2                      case '2': sevenSegPort = ~0x5B; break;
1061   2                      case '3': sevenSegPort = ~0x4F; break;
1062   2                      case '4': sevenSegPort = ~0x66; break;
1063   2                      case '5': sevenSegPort = ~0x6D; break;
1064   2                      case '6': sevenSegPort = ~0x7D; break;
1065   2                      case '7': sevenSegPort = ~0x07; break;
1066   2                      case '8': sevenSegPort = ~0x7F; break;
1067   2                      case '9': sevenSegPort = ~0x67; break;
1068   2                      case 'A': sevenSegPort = ~0x77; break;
1069   2                      case 'b': sevenSegPort = ~0x7C; break;
1070   2                      case 'C': sevenSegPort = ~0x39; break;
1071   2                      case 'd': sevenSegPort = ~0x5E; break;
1072   2                      case 'E': sevenSegPort = ~0x79; break;
1073   2                      case 'F': sevenSegPort = ~0x71; break;
1074   2                      case '-': sevenSegPort = 0xBF;  break;
1075   2                      case '.': sevenSegPort = 0x7F;  break;
1076   2                      case 'o': sevenSegPort = 0xFF;  break;  // off
1077   2                      default:  sevenSegPort = 0xAA;                                  // invalid
1078   2              }
1079   1              
1080   1              latchSevenSeg();
1081   1              
1082   1      } // end outputSevenSeg()
1083          
1084          // -------------------------------------------------------------- //
1085          
1086          struct keypad_data getKeysPressed( void ) {
1087   1              
1088   1              struct keypad_data keypad;
1089   1              
1090   1              // enable keypad latch output
1091   1              //oe_keypad = 0;
1092   1              missionControl1( ctrl_kp_oe );
1093   1              
1094   1              // Set keypad columns as outputs & rows as inputs
1095   1              kCol1 = 0;
1096   1              kCol2 = 0;
1097   1              kCol3 = 0;
1098   1              kCol4 = 0;
1099   1              kRow1 = 1;
1100   1              kRow2 = 1;
1101   1              kRow3 = 1;
1102   1              kRow4 = 1;
1103   1              
1104   1              // scan by columns
1105   1      
1106   1              // column 1
1107   1              kCol1 = 0;
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     09/26/2017 16:14:56 PAGE 19  

1108   1              kCol2 = 1;
1109   1              kCol3 = 1;
1110   1              kCol4 = 1;
1111   1              latchKeypad();
1112   1              
1113   1              if (kRow1 == 0) {
1114   2                      keypad.k1 = 1;
1115   2              }
1116   1              else {
1117   2                      keypad.k1 = 0;
1118   2              }
1119   1              if (kRow2 == 0) {
1120   2                      keypad.k4 = 1;
1121   2              }
1122   1              else {
1123   2                      keypad.k4 = 0;
1124   2              }
1125   1              if (kRow3 == 0) {
1126   2                      keypad.k7 = 1;
1127   2              }
1128   1              else {
1129   2                      keypad.k7 = 0;
1130   2              }
1131   1              if (kRow4 == 0) {
1132   2                      keypad.kstar = 1;
1133   2              }
1134   1              else {
1135   2                      keypad.kstar = 0;
1136   2              }
1137   1              kCol1 = 1;
1138   1              
1139   1              // column 2
1140   1              kCol2 = 0;
1141   1              latchKeypad();
1142   1              
1143   1              if (kRow1 == 0) {
1144   2                      keypad.k2 = 1;
1145   2              }
1146   1              else {
1147   2                      keypad.k2 = 0;
1148   2              }
1149   1              if (kRow2 == 0) {
1150   2                      keypad.k5 = 1;
1151   2              }
1152   1              else {
1153   2                      keypad.k5 = 0;
1154   2              }
1155   1              if (kRow3 == 0) {
1156   2                      keypad.k8 = 1;
1157   2              }
1158   1              else {
1159   2                      keypad.k8 = 0;
1160   2              }
1161   1              if (kRow4 == 0) {
1162   2                      keypad.k0 = 1;
1163   2              }
1164   1              else {
1165   2                      keypad.k0 = 0;
1166   2              }
1167   1              kCol2 = 1;
1168   1              
1169   1              // column 3
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     09/26/2017 16:14:56 PAGE 20  

1170   1              kCol3 = 0;
1171   1              latchKeypad();
1172   1              
1173   1              if (kRow1 == 0) {
1174   2                      keypad.k3 = 1;
1175   2              }
1176   1              else {
1177   2                      keypad.k3 = 0;
1178   2              }
1179   1              if (kRow2 == 0) {
1180   2                      keypad.k6 = 1;
1181   2              }
1182   1              else {
1183   2                      keypad.k6 = 0;
1184   2              }
1185   1              if (kRow3 == 0) {
1186   2                      keypad.k9 = 1;
1187   2              }
1188   1              else {
1189   2                      keypad.k9 = 0;
1190   2              }
1191   1              if (kRow4 == 0) {
1192   2                      keypad.kpound = 1;
1193   2              }
1194   1              else {
1195   2                      keypad.kpound = 0;
1196   2              }
1197   1              kCol3 = 1;
1198   1              
1199   1              // column 4
1200   1              kCol4 = 0;
1201   1              latchKeypad();
1202   1              
1203   1              if (kRow1 == 0) {
1204   2                      keypad.kA = 1;
1205   2              }
1206   1              else {
1207   2                      keypad.kA = 0;
1208   2              }
1209   1              if (kRow2 == 0) {
1210   2                      keypad.kB = 1;
1211   2              }
1212   1              else {
1213   2                      keypad.kB = 0;
1214   2              }
1215   1              if (kRow3 == 0) {
1216   2                      keypad.kC = 1;
1217   2              }
1218   1              else {
1219   2                      keypad.kC = 0;
1220   2              }
1221   1              if (kRow4 == 0) {
1222   2                      keypad.kD = 1;
1223   2              }
1224   1              else {
1225   2                      keypad.kD = 0;
1226   2              }
1227   1              kCol4 = 1;
1228   1              latchKeypad();
1229   1              
1230   1              // disable keypad latch output
1231   1              //oe_keypad = 1;
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     09/26/2017 16:14:56 PAGE 21  

1232   1              missionControl1( ctrl_off );
1233   1              
1234   1              return keypad; 
1235   1              
1236   1      } // end getKeysPressed()
1237          
1238          // -------------------------------------------------------------- //
1239          
1240          void displayKeyPressed( struct keypad_data keypad ) {
1241   1              
1242   1              if ( keypad.k1 == 1 ) {
1243   2                      outputSevenSeg('1');
1244   2              }
1245   1              else if ( keypad.k2 == 1 ) {
1246   2                      outputSevenSeg('2');
1247   2              }
1248   1              else if ( keypad.k3 == 1 ) {
1249   2                      outputSevenSeg('3');
1250   2              }
1251   1              else if ( keypad.k4 == 1 ) {
1252   2                      outputSevenSeg('4');
1253   2              }
1254   1              else if ( keypad.k5 == 1 ) {
1255   2                      outputSevenSeg('5');
1256   2              }
1257   1              else if ( keypad.k6 == 1 ) {
1258   2                      outputSevenSeg('6');
1259   2              }
1260   1              else if ( keypad.k7 == 1 ) {
1261   2                      outputSevenSeg('7');
1262   2              }
1263   1              else if ( keypad.k8 == 1 ) {
1264   2                      outputSevenSeg('8');
1265   2              }
1266   1              else if ( keypad.k9 == 1 ) {
1267   2                      outputSevenSeg('9');
1268   2              }
1269   1              else if ( keypad.kA == 1 ) {
1270   2                      outputSevenSeg('A');
1271   2              }
1272   1              else if ( keypad.k0 == 1 ) {
1273   2                      outputSevenSeg('0');
1274   2              }
1275   1              else if ( keypad.kB == 1 ) {
1276   2                      outputSevenSeg('b');
1277   2              }
1278   1              else if ( keypad.kC == 1 ) {
1279   2                      outputSevenSeg('C');
1280   2              }
1281   1              else if ( keypad.kD == 1 ) {
1282   2                      outputSevenSeg('d');
1283   2              }
1284   1              else if ( keypad.kstar == 1 ) {
1285   2                      outputSevenSeg('.');
1286   2              }
1287   1              else if ( keypad.kpound == 1 ) {
1288   2                      outputSevenSeg('-');
1289   2              }
1290   1              else {
1291   2                      outputSevenSeg('o');
1292   2              }
1293   1              
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     09/26/2017 16:14:56 PAGE 22  

1294   1      } // end displayKeyPressed()
1295          // -------------------------------------------------------------- //
1296          
1297          void lcdCmd( byte cmd ) {
1298   1              
1299   1              //rs_lcd = 0;                   // reg select low for command
1300   1              // --- RW tied low for write --- //
1301   1              //e_lcd = 1;                    // E high for pulse
1302   1              
1303   1              missionControl1( ctrl_lcd_cmd_start );
1304   1              
1305   1              lcdPort = cmd;
1306   1              //latchLCD();
1307   1              
1308   1              msDelay(1);                     // Need Tpw > 140 ns
1309   1              //e_lcd = 0;                    // E low to end pulse
1310   1              
1311   1              missionControl1( ctrl_lcd_cmd_finish );
1312   1              
1313   1      } // end lcdCmd()
1314          
1315          // -------------------------------------------------------------- //
1316          
1317          void lcdData( byte dat ) {
1318   1              
1319   1              //rs_lcd = 1;                   // reg select high for data
1320   1              // --- RW tied low for write --- //
1321   1              //e_lcd = 1;                    // E high for pulse
1322   1              
1323   1              missionControl1( ctrl_lcd_data_start );
1324   1              
1325   1              lcdPort = dat;
1326   1              //latchLCD();
1327   1              
1328   1              msDelay(1);                     // Need Tpw > 140 ns
1329   1              //e_lcd = 0;                    // E low to end pulse
1330   1              
1331   1              missionControl1( ctrl_lcd_data_finish );
1332   1              
1333   1      } // end lcdData()
1334          
1335          // -------------------------------------------------------------- //
1336          
1337          void lcdInit( void ) {  
1338   1              
1339   1              msDelay(50);
1340   1              lcdCmd(0x38);                   // Function set
1341   1              msDelay(5);
1342   1              lcdCmd(0x38);                   // Function set
1343   1              msDelay(1);
1344   1              lcdCmd(0x0F);                   // Display ON/OFF control
1345   1              msDelay(1);
1346   1              lcdCmd(0x01);                   // Clear display
1347   1              msDelay(2);
1348   1              
1349   1      } // end lcdInit()
1350          
1351          // -------------------------------------------------------------- //
1352          
1353          void lcdClear( void ) {
1354   1              
1355   1              lcdCmd(0x01);                   // Clear display
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     09/26/2017 16:14:56 PAGE 23  

1356   1              msDelay(2);
1357   1              
1358   1      } // end lcdClear()
1359          
1360          // -------------------------------------------------------------- //
1361          
1362          void lcdChar( byte character ) {
1363   1              
1364   1              lcdData(character);             // send character
1365   1              
1366   1      } // end lcdChar()
1367          
1368          // -------------------------------------------------------------- //
1369          
1370          void lcdString( volatile char *string ) {
1371   1              
1372   1              int i = 0;
1373   1              while( string[i] != '`') {
1374   2                      lcdChar( string[i] );
1375   2                      i++;
1376   2              }
1377   1              
1378   1      } // end lcdString()
1379          
1380          // -------------------------------------------------------------- //
1381          
1382          void lcdLine( int line ) {
1383   1              
1384   1              switch (line) {
1385   2                      case 1: {
1386   3                              lcdCmd(0x80);
1387   3                              break;
1388   3                      }
1389   2                      case 2: {
1390   3                              lcdCmd(0xC0);
1391   3                              break;
1392   3                      }
1393   2                      case 3: {
1394   3                              lcdCmd(0x94);
1395   3                              break;
1396   3                      }
1397   2                      case 4: {
1398   3                              lcdCmd(0xD4);
1399   3                              break;
1400   3                      }
1401   2                      default:
1402   2                              lcdCmd(0x80);
1403   2                      
1404   2              } // end switch
1405   1              
1406   1      } // end lcdLine()
1407          
1408          // -------------------------------------------------------------- //
1409          
1410          void lcdHexWord( word hex ) {
1411   1      
1412   1              char hexStr[] = "--------`";
1413   1      
1414   1              sprintf( hexStr, "%04X`", (int)hex );
1415   1              lcdString( &hexStr );
1416   1      
1417   1      } // end lcdHexWord()
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     09/26/2017 16:14:56 PAGE 24  

1418          
1419          // -------------------------------------------------------------- //
1420          
1421          void lcdHexByte( byte hex ) {
1422   1      
1423   1              char hexStr[] = "-----`";
1424   1      
1425   1              sprintf( hexStr, "%02X`", (int)hex );
1426   1              lcdString( &hexStr );
1427   1      
1428   1      } // end lcdHexWord()
1429          
1430          // -------------------------------------------------------------- //
1431          
1432          void lcdAsciiByte( byte hex ) {
1433   1      
1434   1      //      char hexStr[] = "-----`";
1435   1      //
1436   1      //      sprintf( hexStr, "%1c`", (int)hex );
1437   1      //      lcdString( &hexStr );
1438   1      
1439   1              lcdChar( hex );
1440   1      
1441   1      } // end lcdHexWord()
1442          
1443          // -------------------------------------------------------------- //
1444          
1445          void missionControl1( int dec ) {
1446   1              
1447   1              switch ( dec ) {
1448   2                      
1449   2                      // The MSB is changed first to avoid false triggers of the LCD enable
1450   2                      // line as the enable line never goes high when the MSB is low.
1451   2                      case ctrl_off: {
1452   3                              dec2 = 0;
1453   3                              dec1 = 0;
1454   3                              dec0 = 0;
1455   3                              break;
1456   3                      }
1457   2                      case ctrl_ss_latch: {
1458   3                              dec2 = 0;
1459   3                              dec1 = 0;
1460   3                              dec0 = 1;
1461   3                              break;
1462   3                      }
1463   2                      case ctrl_kp_oe: {
1464   3                              dec2 = 0;
1465   3                              dec1 = 1;
1466   3                              dec0 = 0;
1467   3                              break;
1468   3                      }
1469   2                      case ctrl_kp_oelatch: {
1470   3                              dec2 = 0;
1471   3                              dec1 = 1;
1472   3                              dec0 = 1;
1473   3                              break;
1474   3                      }
1475   2                      case ctrl_lcd_cmd_start: {
1476   3                              dec2 = 1;
1477   3                              dec1 = 0;
1478   3                              dec0 = 0;
1479   3                              break;
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     09/26/2017 16:14:56 PAGE 25  

1480   3                      }
1481   2                      case ctrl_lcd_cmd_finish: {
1482   3                              dec2 = 1;
1483   3                              dec1 = 0;
1484   3                              dec0 = 1;
1485   3                              break;
1486   3                      }
1487   2                      case ctrl_lcd_data_start: {
1488   3                              dec2 = 1;
1489   3                              dec1 = 1;
1490   3                              dec0 = 0;
1491   3                              break;
1492   3                      }
1493   2                      case ctrl_lcd_data_finish: {
1494   3                              dec2 = 1;
1495   3                              dec1 = 1;
1496   3                              dec0 = 1;
1497   3                              break;
1498   3                      }               
1499   2              } // end switch
1500   1              
1501   1      } // end missionControl1()
1502          
1503          // -------------------------------------------------------------- //
1504          
1505          void missionControl2( int dec ) {
1506   1              
1507   1              switch ( dec ) {
1508   2                      case ctrl_off: {
1509   3                              dec4 = 0;
1510   3                              dec3 = 0;
1511   3                              dec5 = 0;
1512   3                              break;
1513   3                      }
1514   2                      case ctrl_adc_start: {
1515   3                              dec4 = 0;
1516   3                              dec3 = 1;
1517   3                              dec5 = 0;
1518   3                              break;
1519   3                      }
1520   2                      case ctrl_rtc_rd: {
1521   3                              dec4 = 1;
1522   3                              dec3 = 0;
1523   3                              dec5 = 0;
1524   3                              break;
1525   3                      }
1526   2                      case ctrl_adc_finish: {
1527   3                              dec4 = 1;
1528   3                              dec3 = 1;
1529   3                              dec5 = 0;
1530   3                              break;
1531   3                      }
1532   2                      case ctrl_rtc_cs1: {
1533   3                              dec4 = 0;
1534   3                              dec3 = 0;
1535   3                              dec5 = 1;
1536   3                              break;
1537   3                      }
1538   2                      // not used
1539   2      //              case ctrl_rtc_cs0: {
1540   2      //                      dec5 = 1;
1541   2      //                      dec4 = 0;
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     09/26/2017 16:14:56 PAGE 26  

1542   2      //                      dec3 = 1;
1543   2      //                      break;
1544   2      //              }
1545   2                      case ctrl_rtc_cs0: {
1546   3                              dec4 = 1;
1547   3                              dec3 = 0;
1548   3                              dec5 = 1;
1549   3                              break;
1550   3                      }
1551   2                      case ctrl_rtc_wr: {
1552   3                              dec4 = 1;
1553   3                              dec3 = 1;
1554   3                              dec5 = 1;
1555   3                              break;
1556   3                      }               
1557   2              } // end switch
1558   1              
1559   1      } // end missionControl2()
1560          
1561          // -------------------------------------------------------------- //
1562          
1563          void msDelay( unsigned msecs ) {
1564   1              
1565   1              unsigned i;
1566   1              unsigned char j;
1567   1              
1568   1              msecs = msecs * 3.23;
1569   1              
1570   1              for(i=0;i<msecs;i++){
1571   2                      for(j=0;j<100;j++);
1572   2              }
1573   1              
1574   1      } // end msDelay()
1575          
1576          // -------------------------------------------------------------- //
1577          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   5231    ----
   CONSTANT SIZE    =    752    ----
   XDATA SIZE       =   ----     983
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
