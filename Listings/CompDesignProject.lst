C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     09/29/2017 16:18:10 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE COMPDESIGNPROJECT
OBJECT MODULE PLACED IN .\Objects\CompDesignProject.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE CompDesignProject.c LARGE BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\CompDe
                    -signProject.lst) OBJECT(.\Objects\CompDesignProject.obj)

line level    source

   1          /* Auth: Megan Bird
   2           * File: CompDesignProject.c
   3           * Course: CEEN-4330 – Microprocessor System Design – University of Nebraska-Lincoln
   4           * Lab: Project
   5           * Date: 3/14/2017
   6           * Desc: 8051 program with ROM, RAM, and I/O
   7           */
   8           
   9          #include <REGX55.H>
  10          #include <stdio.h>
  11          #include <absacc.h>
  12          
  13          // P1
  14          sbit P1_0 = P1^0;
  15          sbit P1_1 = P1^1;
  16          
  17          // P3
  18          sbit P3_0 = P3^0;
  19          sbit P3_1 = P3^1;
  20          sbit P3_2 = P3^2;
  21          sbit P3_3 = P3^3;
  22          sbit P3_4 = P3^4;
  23          sbit P3_5 = P3^5;
  24          sbit P3_6 = P3^6;
  25          sbit P3_7 = P3^7;
  26          
  27          // Keypad
  28          sbit kCol1  = P1^7;
  29          sbit kCol2  = P1^6;
  30          sbit kCol3  = P1^5;
  31          sbit kCol4  = P1^4;
  32          sbit kRow1  = P1^3;
  33          sbit kRow2  = P1^2;
  34          sbit kRow3  = P1^1;
  35          sbit kRow4  = P1^0;
  36          sbit cs_keypad = P3^1;          // latch
  37          sbit oe_keypad = P3^2;
  38          
  39          // Seven-Segment Display
  40          sfr sevenSegPort = 0x90;
  41          sbit cs_sevenSeg = P3^0;        // latch
  42          
  43          // LCD
  44          sbit cs_lcd = P3^3;                             // latch
  45          sbit rs_lcd = P3^4;                             // reg select
  46          sbit e_lcd  = P3^5;                             // enable
  47          // rw tied to ground to always enable read
  48          sfr lcdPort = 0x90;
  49          
  50          // ADC
  51          sbit oe_adc = P3^3;                             // latch output enable
  52          sbit wr_adc = P3^4;                             // WR line of ADC
  53          sfr adcPort = 0x90;
  54          
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     09/29/2017 16:18:10 PAGE 2   

  55          // RTC
  56          sbit rtc_data0 = P1^0;
  57          sbit rtc_data1 = P1^1;
  58          sbit rtc_data2 = P1^2;
  59          sbit rtc_data3 = P1^3;
  60          sbit rtc_add0 = P1^4;
  61          sbit rtc_add1 = P1^5;
  62          sbit rtc_add2 = P1^6;
  63          sbit rtc_add3 = P1^7;
  64          sfr rtcPort = 0x90;
  65          
  66          // Mission Control 1
  67          enum {ctrl_off,
  68                                  ctrl_ss_latch,
  69                                  ctrl_kp_oe,
  70                                  ctrl_kp_oelatch,
  71                                  ctrl_lcd_cmd_start,
  72                                  ctrl_lcd_cmd_finish,
  73                                  ctrl_lcd_data_start,
  74                                  ctrl_lcd_data_finish };
  75          
  76          // Mission Control 2
  77          enum {ctrl_adc_start = 1,
  78                                  ctrl_rtc_rd,
  79                                  ctrl_adc_finish,
  80                                  ctrl_rtc_cs1,
  81                                  ctrl_rtc_cs0 = 6,
  82                                  ctrl_rtc_wr };
  83          
  84          sbit dec0 = P3^3;
  85          sbit dec1 = P3^4;       // Rewired, GAL2 not in use             
  86          sbit dec2 = P3^2;       // Rewired, GAL2 not in use
  87          sbit dec3 = P3^3;
  88          sbit dec4 = P3^4;
  89          sbit dec5 = P3^5;
  90          
  91          // ======================= prototypes =========================== //
  92          
  93          typedef unsigned char byte;
  94          typedef unsigned short word;
  95          typedef enum { false, true } bool;
  96          
  97          struct keypad_data {
  98                  bool k1;
  99                  bool k2;
 100                  bool k3;
 101                  bool k4;
 102                  bool k5;
 103                  bool k6;
 104                  bool k7;
 105                  bool k8;
 106                  bool k9;
 107                  bool k0;
 108                  bool kA;
 109                  bool kB;
 110                  bool kC;
 111                  bool kD;
 112                  bool kstar;
 113                  bool kpound;
 114          };
 115          
 116          //------- high level prototyeps -------//
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     09/29/2017 16:18:10 PAGE 3   

 117          void mainMenu( void );
 118          void memoryMenu( void );
 119          void serialMenu( void );
 120          void dumpMenu( void );
 121          void moveMenu( void );
 122          void editMenu( void );
 123          void findMenu( void );
 124          
 125          word input4Hex( void );
 126          byte input2Hex( void );
 127          word inputHex( void );
 128          void waitForKeyRelease( void );
 129          
 130          //------- low level prototypes -------//
 131          void latchSevenSeg( void );
 132          void latchKeypad( void );
 133          void outputSevenSeg( char character );
 134          struct keypad_data getKeysPressed( void );
 135          void displayKeyPressed( struct keypad_data keypad );
 136          
 137          void lcdCmd( byte cmd );
 138          void lcdData( byte dat );
 139          void lcdInit( void );
 140          void lcdClear( void );
 141          void lcdChar( byte character );
 142          void lcdString( volatile char *string );
 143          void lcdLine( int line );
 144          void lcdHexWord( word hex );
 145          void lcdHexByte( byte hex );
 146          void lcdAsciiByte( byte hex );
 147          
 148          void missionControl1( int dec );
 149          void missionControl2( int dec );
 150          void msDelay( unsigned msecs );
 151          
 152          // ======================== main ================================ //
 153          
 154          void main(void) {
 155   1              
 156   1              missionControl1( ctrl_off );
 157   1              //missionControl2( ctrl_off );
 158   1              
 159   1              lcdInit();
 160   1              //rtcInit();
 161   1      
 162   1              mainMenu();             // Enter main program
 163   1      
 164   1              while(1); // Stay off the streets
 165   1      
 166   1      } // end main()
 167          
 168          // ======================= functions ============================ //
 169          
 170          void mainMenu( void ) { 
 171   1      
 172   1              struct keypad_data keypad;
 173   1      
 174   1              while(1) {
 175   2      
 176   2                      char MenuStr1[] = "Megan Bird CEEN 4330`";
 177   2                      char MenuStr2[] = "--------------------`";
 178   2                      char MenuStr3[] = "Main Menu`";
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     09/29/2017 16:18:10 PAGE 4   

 179   2                      char MenuStr4[] = "1: Memory  2: Serial`";
 180   2              
 181   2                      lcdClear();
 182   2                      lcdString( &MenuStr1 );
 183   2                      lcdLine(2);
 184   2                      lcdString( &MenuStr2 );
 185   2                      lcdLine(3);
 186   2                      lcdString( &MenuStr3 );
 187   2                      lcdLine(4);
 188   2                      lcdString( &MenuStr4 );
 189   2              
 190   2                      while(1) {      
 191   3                              keypad = getKeysPressed();
 192   3                      
 193   3                              if( keypad.k1 == true ) {
 194   4                                      waitForKeyRelease();
 195   4                                      memoryMenu();
 196   4                                      break;
 197   4                              }
 198   3                              else if( keypad.k2 == true ) {
 199   4                                      waitForKeyRelease();
 200   4                                      serialMenu();
 201   4                                      break;
 202   4                              }
 203   3                      } // end option while
 204   2      
 205   2              } // end main while
 206   1      
 207   1      } // end choiceMainMenu()
 208          
 209          // -------------------------------------------------------------- //
 210          
 211          void serialMenu( void ) {
 212   1      
 213   1              struct keypad_data keypad;
 214   1              bool exit = false;
 215   1              word baud_rate = 0x0000;
 216   1              bool parity = false;
 217   1              bool stop_bits = false;
 218   1              word tx_string = 0x0000;
 219   1              int i = 0;
 220   1      
 221   1              while( exit == false ) {
 222   2      
 223   2                      char MenuStr1[] = "Serial Setup`";
 224   2                      char MenuStr2[] = "--------------------`";
 225   2      
 226   2                      char MenuStr3[] = "Baud Rate: `";
 227   2                      char MenuStr4[] = " 1200 2400 4800 9600`";
 228   2      
 229   2                      char MenuStr5[] = "Use parity bit?`";
 230   2                      char MenuStr7[] = "                    `";
 231   2      
 232   2                      char MenuStr10[]= "Start & stop bits?`";
 233   2                      char MenuStr11[]= " 1: Yes     2: No`";
 234   2      
 235   2                      char MenuStr14[]= "Enter 4 chars for TX`";
 236   2                      char MenuStr15[]= "Chars transmitted   `";
 237   2                      char MenuStr16[]= "# : Return to Main  `";
 238   2              
 239   2                      lcdClear();
 240   2                      lcdString( &MenuStr1 );
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     09/29/2017 16:18:10 PAGE 5   

 241   2                      lcdLine(2);
 242   2                      lcdString( &MenuStr2 );
 243   2      
 244   2                      // stop bit prompt
 245   2                      lcdLine(4);
 246   2                      lcdString( &MenuStr7 );
 247   2                      lcdLine(3);
 248   2                      lcdString( &MenuStr7 );
 249   2                      lcdLine(3);
 250   2                      lcdString( &MenuStr10 );
 251   2                      lcdLine(4);
 252   2                      lcdString( &MenuStr11 );
 253   2      
 254   2                      while(1) {      
 255   3                              keypad = getKeysPressed();
 256   3                      
 257   3                              if( keypad.k1 == true ) {
 258   4                                      waitForKeyRelease();
 259   4                                      stop_bits = true; 
 260   4                                      break;
 261   4                              }
 262   3                              else if( keypad.k2 == true ) {
 263   4                                      waitForKeyRelease();
 264   4                                      stop_bits = false;
 265   4                                      break;
 266   4                              }
 267   3                      } // end stop bit while
 268   2      
 269   2                      // parity prompt
 270   2                      if (stop_bits == true) {
 271   3                              lcdLine(3);
 272   3                              lcdString( &MenuStr7 );
 273   3                              lcdLine(3);
 274   3                              lcdString( &MenuStr5 );
 275   3              
 276   3                              while(1) {      
 277   4                                      keypad = getKeysPressed();
 278   4                              
 279   4                                      if( keypad.k1 == true ) {
 280   5                                              waitForKeyRelease();
 281   5                                              parity = true;
 282   5                                              break;
 283   5                                      }
 284   4                                      else if( keypad.k2 == true ) {
 285   5                                              waitForKeyRelease();
 286   5                                              parity = false;
 287   5                                              break;
 288   5                                      }
 289   4                              } // end parity while
 290   3                      } // end parity prompt
 291   2      
 292   2                      if (stop_bits == true) {
 293   3                              // baud prompt
 294   3                              while( (baud_rate != 0x1200) && (baud_rate != 0x2400) && (baud_rate != 0x4800) && (baud_rate != 0x9600)
             -) {
 295   4                                      lcdLine(4);
 296   4                                      lcdString( &MenuStr4 );
 297   4                                      lcdLine(3);
 298   4                                      lcdString( &MenuStr7 );
 299   4                                      lcdLine(3);
 300   4                                      lcdString( &MenuStr3 );
 301   4                                      baud_rate = input4Hex();
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     09/29/2017 16:18:10 PAGE 6   

 302   4                              } // end baud rate input
 303   3                      } // end baud rate prompt
 304   2      
 305   2                      // characters prompt
 306   2                      lcdClear();
 307   2                      lcdString( &MenuStr14 );
 308   2                      lcdLine(2);
 309   2                      tx_string = input4Hex();
 310   2      
 311   2                      // set transmit settings
 312   2                      TMOD = 0x20;    // Use Timer 1, 8-bit auto-reload
 313   2      
 314   2                      switch (baud_rate) {
 315   3                               case (0x1200): TH1 = 0xE6; break;
 316   3                               case (0x2400): TH1 = 0xF3; break;
 317   3                               case (0x4800): TH1 = 0xFA; break;
 318   3                               case (0x9600): TH1 = 0xFD; break;
 319   3                      } // end baud rate switch
 320   2      
 321   2                      if (stop_bits == false) {       // use mode 0
 322   3                              SCON = 0x10;
 323   3                      }
 324   2                      else if (parity == false) {     // use mode 1
 325   3                              SCON = 0x50;                    
 326   3                      }
 327   2                      else {                                          // use mode 3
 328   3                              SCON = 0xC0;    
 329   3                      }
 330   2      
 331   2                      // transmit
 332   2                      TR1 = 1;
 333   2                      ACC = (tx_string>>8) & 0xFF;
 334   2                      if (P) {        // set parity bit
 335   3                              SCON = SCON | 0x08;
 336   3                      }
 337   2                      SBUF = (tx_string>>8) & 0xFF;
 338   2                      while(TI==0);
 339   2                      TI = 0;
 340   2      
 341   2                      SCON = SCON &0xF7; // clear parity bit
 342   2                      ACC = tx_string & 0xFF;
 343   2                      if (P) {        // set parity bit
 344   3                              SCON = SCON | 0x08;
 345   3                      }
 346   2                      SBUF = tx_string & 0xFF;
 347   2                      while(TI==0);
 348   2                      TI = 0;
 349   2      
 350   2                      // transmit complete message
 351   2                      lcdLine(3);
 352   2                      lcdString( &MenuStr15 );
 353   2                      lcdLine(4);
 354   2                      lcdString( &MenuStr16 );
 355   2      
 356   2                      while(1) {      
 357   3                              keypad = getKeysPressed();
 358   3              
 359   3                              if( keypad.kpound == true ) {
 360   4                                      exit = true;
 361   4                                      waitForKeyRelease();
 362   4                                      break;
 363   4                              }
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     09/29/2017 16:18:10 PAGE 7   

 364   3                      } // end option while
 365   2              } // end main while
 366   1      
 367   1      } // end seerialMenu()
 368          // -------------------------------------------------------------- //
 369          
 370          void memoryMenu( void ) {
 371   1      
 372   1              struct keypad_data keypad;
 373   1              bool exit = false;
 374   1      
 375   1              while( exit == false ) {
 376   2      
 377   2                      char MenuStr1[] = "Memory Menu`";
 378   2                      char MenuStr2[] = "1 : Dump    2 : Move`";
 379   2                      char MenuStr3[] = "3 : Edit    4 : Find`";
 380   2                      char MenuStr4[] = "# : Return to Main  `";
 381   2              
 382   2                      lcdClear();
 383   2                      lcdString( &MenuStr1 );
 384   2                      lcdLine(2);
 385   2                      lcdString( &MenuStr2 );
 386   2                      lcdLine(3);
 387   2                      lcdString( &MenuStr3 );
 388   2                      lcdLine(4);
 389   2                      lcdString( &MenuStr4 );
 390   2              
 391   2                      while(1) {      
 392   3                              keypad = getKeysPressed();
 393   3                      
 394   3                              if( keypad.kpound == true ) {
 395   4                                      exit = true;
 396   4                                      waitForKeyRelease();
 397   4                                      break;
 398   4                              }
 399   3                              else if( keypad.k1 == true ) {
 400   4                                      waitForKeyRelease();
 401   4                                      dumpMenu();
 402   4                                      break;
 403   4                              }
 404   3                              else if( keypad.k2 == true ) {
 405   4                                      waitForKeyRelease();
 406   4                                      moveMenu();
 407   4                                      break;
 408   4                              }
 409   3                              else if( keypad.k3 == true ) {
 410   4                                      waitForKeyRelease();
 411   4                                      editMenu();
 412   4                                      break;
 413   4                              }
 414   3                              else if( keypad.k4 == true ) {
 415   4                                      waitForKeyRelease();
 416   4                                      findMenu();
 417   4                                      break;
 418   4                              }
 419   3                      } // end option while
 420   2      
 421   2              } // end main while
 422   1      
 423   1      } // end memoryMenu()
 424          // -------------------------------------------------------------- //
 425          
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     09/29/2017 16:18:10 PAGE 8   

 426          void dumpMenu( void ) {
 427   1      
 428   1              struct keypad_data keypad;
 429   1              bool exit;
 430   1              word segment;
 431   1              word block;
 432   1              word offset;
 433   1              byte memVal;
 434   1              int i;
 435   1              
 436   1              char MenuStr1[] = "Dump Setup`";
 437   1              char MenuStr2[] = "Start Seg Addr: `";
 438   1              char MenuStr3[] = "Block Size: `";
 439   1              char MenuStr4[] = "1:<--  2:-->  #:Exit`";
 440   1      
 441   1              exit = false;
 442   1              segment = 0x0000;
 443   1              block = 0x0000;
 444   1              offset = 0x0000;
 445   1      
 446   1              //----------------//
 447   1              //   Dump Setup   //
 448   1              //----------------//
 449   1      
 450   1              // print header and footer
 451   1              lcdClear();
 452   1              lcdString( &MenuStr1 );
 453   1      
 454   1              // address prompt
 455   1              lcdLine(3);
 456   1              lcdString( &MenuStr2 );
 457   1              // read 4 hex digits from keypad
 458   1              segment = input4Hex(); 
 459   1      
 460   1              // block size prompt
 461   1              lcdLine(4);
 462   1              lcdString( &MenuStr3 );
 463   1              // read 4 hex digits from keypad
 464   1              while( block == 0x0000 ) {
 465   2                      block = input4Hex();
 466   2              }
 467   1      
 468   1              //------------------//
 469   1              //   Dump Display   //
 470   1              //------------------//
 471   1      
 472   1              while( exit == false ) {
 473   2      
 474   2                      // print segment:offset
 475   2                      lcdClear();
 476   2                      lcdHexWord( segment );
 477   2                      lcdChar(':');
 478   2                      lcdHexWord( offset );
 479   2      
 480   2                      // print hex values
 481   2                      lcdLine(2);
 482   2                      for( i = 0; i < 7; i++ ) {
 483   3                              if( (offset + i) < block ) {
 484   4                                      memVal = XBYTE[ (segment * 16) + offset + i ]; // get seg:offset+i
 485   4                                      lcdHexByte( memVal );   // print value
 486   4                                      if( i < 6 ) {
 487   5                                              lcdChar(' ');           // print space if not last one on line
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     09/29/2017 16:18:10 PAGE 9   

 488   5                                      }
 489   4                              }
 490   3                      }
 491   2      
 492   2                      // print ascii values
 493   2                      lcdLine(3);
 494   2                      for( i = 0; i < 7; i++ ) {
 495   3                              if( (offset + i) < block ) {
 496   4                                      memVal = XBYTE[ (segment * 16) + offset + i ]; // get seg:offset+i
 497   4                                      lcdAsciiByte( memVal ); // print value
 498   4                                      lcdChar(' ');
 499   4                                      if( i < 6 ) {
 500   5                                              lcdChar(' ');           // print space if not last one on line
 501   5                                      }
 502   4                              }
 503   3                      }
 504   2      
 505   2                      // print footer
 506   2                      lcdLine(4);
 507   2                      lcdString( &MenuStr4 );         
 508   2                              
 509   2                      while(1) {      
 510   3                              keypad = getKeysPressed();
 511   3                      
 512   3                              if( keypad.kpound == true ) {
 513   4                                      exit = true;
 514   4                                      waitForKeyRelease();
 515   4                                      break;
 516   4                              }
 517   3                              else if( keypad.k1 == true ) {
 518   4                                      waitForKeyRelease();
 519   4                                      // if decremented offset is less than start (0),
 520   4                                      if( offset >= 7 ) {
 521   5                                              //      revert (-7) and do nothing
 522   5                                              offset -= 7;
 523   5                                      }
 524   4                                      break;
 525   4                              }
 526   3                              else if( keypad.k2 == true ) {
 527   4                                      waitForKeyRelease();
 528   4                                      // increment offset by 7
 529   4                                      offset += 7;
 530   4                                      // if incremented offset is past block size,
 531   4                                      if( offset > block ) {
 532   5                                              //      revert (-7) and do nothing
 533   5                                              offset -= 7;
 534   5                                      }
 535   4                                      break;
 536   4                              }
 537   3                      } // end option while
 538   2      
 539   2              } // end main while
 540   1      
 541   1      } // end dumpMenu()
 542          
 543          // -------------------------------------------------------------- //
 544          
 545          void moveMenu( void ) {
 546   1      
 547   1              struct keypad_data keypad;
 548   1              bool exit;
 549   1              word sourceSegment;
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     09/29/2017 16:18:10 PAGE 10  

 550   1              word destSegment;
 551   1              word block;
 552   1              word offset;
 553   1              byte memVal;
 554   1              int i;
 555   1              
 556   1              char MenuStr1[] = "Move Setup`";
 557   1              char MenuStr2[] = "Source Seg Addr: `";
 558   1              char MenuStr3[] = "Dest Seg Addr: `";
 559   1              char MenuStr4[] = "Block Size: `";
 560   1              char MenuStr5[] = "Move Complete`";
 561   1              char MenuStr6[] = "#:Exit`";
 562   1      
 563   1              exit = false;
 564   1              sourceSegment = 0x0000;
 565   1              destSegment = 0x0000;
 566   1              block = 0x0000;
 567   1              offset = 0x0000;
 568   1              i = 0;
 569   1      
 570   1              //----------------//
 571   1              //   Move Setup   //
 572   1              //----------------//
 573   1      
 574   1              // print header and footer
 575   1              lcdClear();
 576   1              lcdString( &MenuStr1 );
 577   1      
 578   1              // source address prompt
 579   1              lcdLine(2);
 580   1              lcdString( &MenuStr2 );
 581   1              // read 4 hex digits from keypad
 582   1              sourceSegment = input4Hex(); 
 583   1      
 584   1              // dest address prompt
 585   1              lcdLine(3);
 586   1              lcdString( &MenuStr3 );
 587   1              // read 4 hex digits from keypad
 588   1              destSegment = input4Hex();
 589   1      
 590   1              // block size prompt
 591   1              lcdLine(4);
 592   1              lcdString( &MenuStr4 );
 593   1              // read 4 hex digits from keypad
 594   1              while( block == 0x0000 ) {
 595   2                      block = input4Hex();
 596   2              }
 597   1      
 598   1              //------------------//
 599   1              //   Move Display   //
 600   1              //------------------//
 601   1      
 602   1              while( exit == false ) {
 603   2      
 604   2                      // print segment:offset
 605   2                      lcdClear();
 606   2                      lcdString( &MenuStr5 );
 607   2                      lcdLine(4);
 608   2                      lcdString( &MenuStr6 );
 609   2      //              lcdHexWord( segment );
 610   2      //              lcdChar(':');
 611   2      //              lcdHexWord( offset );
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     09/29/2017 16:18:10 PAGE 11  

 612   2                      
 613   2      
 614   2                      // perform move
 615   2                      while( (offset + i) < block ) {
 616   3                              memVal = XBYTE[ (sourceSegment * 16) + offset + i ]; // get sourceSeg:offset+i
 617   3                              XBYTE[ (destSegment * 16) + offset + i ] = memVal;      // move to destSeg:offset+i
 618   3                              i++;
 619   3                      }       
 620   2                              
 621   2                      while(1) {      
 622   3                              keypad = getKeysPressed();
 623   3                      
 624   3                              if( keypad.kpound == true ) {
 625   4                                      exit = true;
 626   4                                      waitForKeyRelease();
 627   4                                      break;
 628   4                              }
 629   3      
 630   3                      } // end option while
 631   2      
 632   2              } // end main while
 633   1      
 634   1      } // end moveMenu()
 635          
 636          // -------------------------------------------------------------- //
 637          
 638          void editMenu( void ) {
 639   1      
 640   1              struct keypad_data keypad;
 641   1              bool exit;
 642   1              bool next;
 643   1              word segment;
 644   1              word offset;
 645   1              byte new_value;
 646   1              byte memVal;
 647   1              
 648   1              char MenuStr1[] = "Edit Setup`";
 649   1              char MenuStr2[] = "Segment Addr: `";
 650   1              char MenuStr3[] = "Offset Addr: `";
 651   1              char MenuStr4[] = "New Value: `";
 652   1              char MenuStr5[] = "Edit Complete`";
 653   1              char MenuStr6[] = "0:Continue    #:Exit`";
 654   1      
 655   1              exit = false;
 656   1              next = true;
 657   1              segment = 0x0000;
 658   1              offset = 0x0000;
 659   1              new_value = 0xAA;
 660   1      
 661   1              //----------------//
 662   1              //   Edit Setup   //
 663   1              //----------------//
 664   1      
 665   1              // print header and footer
 666   1              lcdClear();
 667   1              lcdString( &MenuStr1 );
 668   1      
 669   1              // segment address prompt
 670   1              lcdLine(2);
 671   1              lcdString( &MenuStr2 );
 672   1              // read 4 hex digits from keypad
 673   1              segment = input4Hex(); 
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     09/29/2017 16:18:10 PAGE 12  

 674   1      
 675   1              // offset address prompt
 676   1              lcdLine(3);
 677   1              lcdString( &MenuStr3 );
 678   1              // read 4 hex digits from keypad
 679   1              offset = input4Hex();
 680   1              
 681   1              //------------------//
 682   1              //   Edit Display   //
 683   1              //------------------//
 684   1      
 685   1              while( exit == false ) {
 686   2      
 687   2                      if( next == true ) {
 688   3      
 689   3                              // print segment:offset
 690   3                              lcdClear();
 691   3                              lcdHexWord( segment );
 692   3                              lcdChar(':');
 693   3                              lcdHexWord( offset );
 694   3                              lcdChar(' ');
 695   3      
 696   3                              // print current value
 697   3                              memVal = XBYTE[ (segment * 16) + offset ]; // get seg:offset
 698   3                              lcdHexByte( memVal );   // print value
 699   3                      
 700   3                              // new value prompt
 701   3                              lcdLine(2);
 702   3                              lcdString( &MenuStr4 );
 703   3                      
 704   3                              // read 2 hex digits from keypad
 705   3                              new_value = input2Hex();
 706   3                              // store value
 707   3                              XBYTE[ (segment * 16) + offset ] = new_value;   // move to destSeg:offset
 708   3                      
 709   3                              // edit complete
 710   3                              lcdLine(3);
 711   3                              lcdString( &MenuStr5 );
 712   3                      
 713   3                              // exit prompt
 714   3                              lcdLine(4);
 715   3                              lcdString( &MenuStr6 );
 716   3      
 717   3                              offset++;
 718   3      
 719   3                      } // end next if
 720   2                              
 721   2                      while(1) {      
 722   3      
 723   3                              keypad = getKeysPressed();
 724   3                      
 725   3                              if( keypad.kpound == true ) {
 726   4                                      next = false;
 727   4                                      exit = true;
 728   4                                      waitForKeyRelease();
 729   4                                      break;
 730   4                              }
 731   3      
 732   3                              if( keypad.k0 == true ) {
 733   4                                      next = true;
 734   4                                      waitForKeyRelease();
 735   4                                      break;
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     09/29/2017 16:18:10 PAGE 13  

 736   4                              }
 737   3      
 738   3                      } // end option while
 739   2      
 740   2              } // end main while
 741   1      
 742   1      } // end editMenu()
 743          
 744          // -------------------------------------------------------------- //
 745          
 746          void findMenu( void ) {
 747   1      
 748   1              struct keypad_data keypad;
 749   1              bool exit;
 750   1              bool found;
 751   1              word segment;
 752   1              word offset;
 753   1              word block;
 754   1              byte search_value;
 755   1              byte memVal;
 756   1              
 757   1              char MenuStr1[] = "Find Setup`";
 758   1              char MenuStr2[] = "Start Seg Addr: `";
 759   1              char MenuStr3[] = "Block Size: `";
 760   1              char MenuStr4[] = "Search Value: `";
 761   1              char MenuStr5[] = "Value found at`";
 762   1              char MenuStr6[] = "Value not found!`";
 763   1              char MenuStr7[] = "#:Exit`";
 764   1      
 765   1              exit = false;
 766   1              found = false;
 767   1              segment = 0x0000;
 768   1              offset = 0x0000;
 769   1              block = 0x0000;
 770   1              search_value = 0xAA;
 771   1      
 772   1              //----------------//
 773   1              //   Find Setup   //
 774   1              //----------------//
 775   1      
 776   1              // print header and footer
 777   1              lcdClear();
 778   1              lcdString( &MenuStr1 );
 779   1      
 780   1              // start address prompt
 781   1              lcdLine(2);
 782   1              lcdString( &MenuStr2 );
 783   1              // read 4 hex digits from keypad
 784   1              segment = input4Hex(); 
 785   1      
 786   1              // block size prompt
 787   1              lcdLine(3);
 788   1              lcdString( &MenuStr3 );
 789   1              // read 4 hex digits from keypad
 790   1              block = input4Hex();
 791   1      
 792   1              // search value prompt
 793   1              lcdLine(4);
 794   1              lcdString( &MenuStr4 );
 795   1              // read 4 hex digits from keypad
 796   1              search_value = input2Hex();
 797   1              
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     09/29/2017 16:18:10 PAGE 14  

 798   1              //------------------//
 799   1              //   Find Display   //
 800   1              //------------------//
 801   1      
 802   1              // search block for value
 803   1              while( (offset) < block ) {
 804   2                      memVal = XBYTE[ (segment * 16) + offset ]; // get seg:offset+i
 805   2                      if( memVal == search_value ) {
 806   3                         found = true;
 807   3                         break;
 808   3                      }
 809   2                      offset++;
 810   2              }
 811   1      
 812   1              // print result
 813   1              lcdClear();
 814   1              if( found == true ) {
 815   2                      // Value found at ...
 816   2                      lcdString( &MenuStr5 );
 817   2                      // print segment:offset
 818   2                      lcdLine(2);
 819   2                      lcdHexWord( segment );
 820   2                      lcdChar(':');
 821   2                      lcdHexWord( offset );
 822   2                      // Footer
 823   2                      lcdLine(4);
 824   2                      lcdString( &MenuStr7 );
 825   2              }
 826   1              else {
 827   2                      // Value not found
 828   2                      lcdString( &MenuStr6 );
 829   2                      // Footer
 830   2                      lcdLine(4);
 831   2                      lcdString( &MenuStr7 );
 832   2              }
 833   1      
 834   1              while( exit == false ) {
 835   2                              
 836   2                      while(1) {      
 837   3      
 838   3                              keypad = getKeysPressed();
 839   3                      
 840   3                              if( keypad.kpound == true ) {
 841   4                                      exit = true;
 842   4                                      waitForKeyRelease();
 843   4                                      break;
 844   4                              }
 845   3      
 846   3                      } // end option while
 847   2      
 848   2              } // end main while
 849   1      
 850   1      } // end findMenu()
 851          
 852          // -------------------------------------------------------------- //
 853          
 854          word input4Hex( void ) {
 855   1      
 856   1              word segment;
 857   1              word input;
 858   1              int i;
 859   1              
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     09/29/2017 16:18:10 PAGE 15  

 860   1              segment = 0x0000;
 861   1      
 862   1              for( i = 0; i < 4; i++ ) {
 863   2                      segment = segment << 4;
 864   2                      input = inputHex();
 865   2                      segment = segment + input;
 866   2              }
 867   1         
 868   1              return segment;
 869   1      
 870   1      } // end input4Hex()
 871          
 872          // -------------------------------------------------------------- //
 873          
 874          byte input2Hex( void ) {
 875   1      
 876   1              byte value;
 877   1              word input;
 878   1              int i;
 879   1              
 880   1              value = 0x00;
 881   1      
 882   1              for( i = 0; i < 2; i++ ) {
 883   2                      value = value << 4;
 884   2                      input = inputHex();
 885   2                      value = value + input;
 886   2              }
 887   1         
 888   1              return value;
 889   1      
 890   1      } // end input2Hex()
 891          
 892          // -------------------------------------------------------------- //
 893          
 894          word inputHex( void ) {
 895   1      
 896   1              struct keypad_data keypad;
 897   1              word value;
 898   1              byte ascii;
 899   1              
 900   1              
 901   1              value = 0xFFFF;
 902   1              ascii = 0x7E;
 903   1              
 904   1              while( value == 0xFFFF ) {
 905   2                
 906   2                      keypad = getKeysPressed();
 907   2      
 908   2                      if( keypad.k0 == true ) {
 909   3                              value = 0x0000;
 910   3                              ascii = 0x30;
 911   3                      }
 912   2                      if( keypad.k1 == true ) {
 913   3                              value = 0x0001;
 914   3                              ascii = 0x31;
 915   3                      }
 916   2                      if( keypad.k2 == true ) {
 917   3                              value = 0x0002;
 918   3                              ascii = 0x32;
 919   3                      }
 920   2                      if( keypad.k3 == true ) {
 921   3                              value = 0x0003;
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     09/29/2017 16:18:10 PAGE 16  

 922   3                              ascii = 0x33;
 923   3                      }
 924   2                      if( keypad.k4 == true ) {
 925   3                              value = 0x0004;
 926   3                              ascii = 0x34;
 927   3                      }
 928   2                      if( keypad.k5 == true ) {
 929   3                              value = 0x0005;
 930   3                              ascii = 0x35;
 931   3                      }
 932   2                      if( keypad.k6 == true ) {
 933   3                              value = 0x0006;
 934   3                              ascii = 0x36;
 935   3                      }
 936   2                      if( keypad.k7 == true ) {
 937   3                              value = 0x0007;
 938   3                              ascii = 0x37;
 939   3                      }
 940   2                      if( keypad.k8 == true ) {
 941   3                              value = 0x0008;
 942   3                              ascii = 0x38;
 943   3                      }
 944   2                      if( keypad.k9 == true ) {
 945   3                              value = 0x0009;
 946   3                              ascii = 0x39;
 947   3                      }
 948   2                      if( keypad.kA == true ) {
 949   3                              value = 0x000A;
 950   3                              ascii = 0x41;
 951   3                      }
 952   2                      if( keypad.kB == true ) {
 953   3                              value = 0x000B;
 954   3                              ascii = 0x42;
 955   3                      }
 956   2                      if( keypad.kC == true ) {
 957   3                              value = 0x000C;
 958   3                              ascii = 0x43;
 959   3                      }
 960   2                      if( keypad.kD == true ) {
 961   3                              value = 0x000D;
 962   3                              ascii = 0x44;
 963   3                      }
 964   2                      if( keypad.kstar == true ) {
 965   3                              value = 0x000E;
 966   3                              ascii = 0x45;
 967   3                      }
 968   2                      if( keypad.kpound == true ) {
 969   3                              value = 0x000F;
 970   3                              ascii = 0x46;
 971   3                      }
 972   2      
 973   2              } // end while
 974   1      
 975   1              lcdChar( ascii );
 976   1      
 977   1              waitForKeyRelease();
 978   1              return value;   
 979   1      
 980   1      } // end readHex()
 981          
 982          // -------------------------------------------------------------- //
 983          
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     09/29/2017 16:18:10 PAGE 17  

 984          void waitForKeyRelease( void ) {
 985   1      
 986   1              struct keypad_data keypad;
 987   1              bool exit = false;
 988   1              
 989   1              while( exit == false ) {
 990   2      
 991   2                      exit = true;
 992   2                      keypad = getKeysPressed();
 993   2      
 994   2                      if( keypad.k0 == true ) {
 995   3                              exit = false;
 996   3                      }
 997   2                      if( keypad.k1 == true ) {
 998   3                              exit = false;
 999   3                      }
1000   2                      if( keypad.k2 == true ) {
1001   3                              exit = false;
1002   3                      }
1003   2                      if( keypad.k3 == true ) {
1004   3                              exit = false;
1005   3                      }
1006   2                      if( keypad.k4 == true ) {
1007   3                              exit = false;
1008   3                      }
1009   2                      if( keypad.k5 == true ) {
1010   3                              exit = false;
1011   3                      }
1012   2                      if( keypad.k6 == true ) {
1013   3                              exit = false;
1014   3                      }
1015   2                      if( keypad.k7 == true ) {
1016   3                              exit = false;
1017   3                      }
1018   2                      if( keypad.k8 == true ) {
1019   3                              exit = false;
1020   3                      }
1021   2                      if( keypad.k9 == true ) {
1022   3                              exit = false;
1023   3                      }
1024   2                      if( keypad.kA == true ) {
1025   3                              exit = false;
1026   3                      }
1027   2                      if( keypad.kB == true ) {
1028   3                              exit = false;
1029   3                      }
1030   2                      if( keypad.kC == true ) {
1031   3                              exit = false;
1032   3                      }
1033   2                      if( keypad.kD == true ) {
1034   3                              exit = false;
1035   3                      }
1036   2                      if( keypad.kstar == true ) {
1037   3                              exit = false;
1038   3                      }
1039   2                      if( keypad.kpound == true ) {
1040   3                              exit = false;
1041   3                      }
1042   2      
1043   2              } // end while
1044   1              
1045   1              msDelay(100);     
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     09/29/2017 16:18:10 PAGE 18  

1046   1      
1047   1      } // end waitForKeyRelease()
1048          
1049          // -------------------------------------------------------------- //
1050          
1051          void latchSevenSeg( void ) {
1052   1              
1053   1      //      cs_sevenSeg = 1;
1054   1      //      cs_sevenSeg = 0;
1055   1              
1056   1              missionControl1( ctrl_ss_latch );
1057   1              missionControl1( ctrl_off );
1058   1              
1059   1      } // end latchSevenSeg()
1060          
1061          // -------------------------------------------------------------- //
1062          
1063          void latchKeypad( void ) {
1064   1              
1065   1      //      cs_keypad = 1;
1066   1      //      cs_keypad = 0;
1067   1              
1068   1              missionControl1( ctrl_kp_oelatch );
1069   1              missionControl1( ctrl_kp_oe );
1070   1              
1071   1      } // end latchKeypad()
1072          
1073          
1074          // -------------------------------------------------------------- //
1075          
1076          void outputSevenSeg( char character ) {
1077   1              
1078   1              switch( character ) {
1079   2                      case '0': sevenSegPort = ~0x3F; break;
1080   2                      case '1': sevenSegPort = ~0x06; break;
1081   2                      case '2': sevenSegPort = ~0x5B; break;
1082   2                      case '3': sevenSegPort = ~0x4F; break;
1083   2                      case '4': sevenSegPort = ~0x66; break;
1084   2                      case '5': sevenSegPort = ~0x6D; break;
1085   2                      case '6': sevenSegPort = ~0x7D; break;
1086   2                      case '7': sevenSegPort = ~0x07; break;
1087   2                      case '8': sevenSegPort = ~0x7F; break;
1088   2                      case '9': sevenSegPort = ~0x67; break;
1089   2                      case 'A': sevenSegPort = ~0x77; break;
1090   2                      case 'b': sevenSegPort = ~0x7C; break;
1091   2                      case 'C': sevenSegPort = ~0x39; break;
1092   2                      case 'd': sevenSegPort = ~0x5E; break;
1093   2                      case 'E': sevenSegPort = ~0x79; break;
1094   2                      case 'F': sevenSegPort = ~0x71; break;
1095   2                      case '-': sevenSegPort = 0xBF;  break;
1096   2                      case '.': sevenSegPort = 0x7F;  break;
1097   2                      case 'o': sevenSegPort = 0xFF;  break;  // off
1098   2                      default:  sevenSegPort = 0xAA;                                  // invalid
1099   2              }
1100   1              
1101   1              latchSevenSeg();
1102   1              
1103   1      } // end outputSevenSeg()
1104          
1105          // -------------------------------------------------------------- //
1106          
1107          struct keypad_data getKeysPressed( void ) {
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     09/29/2017 16:18:10 PAGE 19  

1108   1              
1109   1              struct keypad_data keypad;
1110   1              
1111   1              // enable keypad latch output
1112   1              //oe_keypad = 0;
1113   1              missionControl1( ctrl_kp_oe );
1114   1              
1115   1              // Set keypad columns as outputs & rows as inputs
1116   1              kCol1 = 0;
1117   1              kCol2 = 0;
1118   1              kCol3 = 0;
1119   1              kCol4 = 0;
1120   1              kRow1 = 1;
1121   1              kRow2 = 1;
1122   1              kRow3 = 1;
1123   1              kRow4 = 1;
1124   1              
1125   1              // scan by columns
1126   1      
1127   1              // column 1
1128   1              kCol1 = 0;
1129   1              kCol2 = 1;
1130   1              kCol3 = 1;
1131   1              kCol4 = 1;
1132   1              latchKeypad();
1133   1              
1134   1              if (kRow1 == 0) {
1135   2                      keypad.k1 = 1;
1136   2              }
1137   1              else {
1138   2                      keypad.k1 = 0;
1139   2              }
1140   1              if (kRow2 == 0) {
1141   2                      keypad.k4 = 1;
1142   2              }
1143   1              else {
1144   2                      keypad.k4 = 0;
1145   2              }
1146   1              if (kRow3 == 0) {
1147   2                      keypad.k7 = 1;
1148   2              }
1149   1              else {
1150   2                      keypad.k7 = 0;
1151   2              }
1152   1              if (kRow4 == 0) {
1153   2                      keypad.kstar = 1;
1154   2              }
1155   1              else {
1156   2                      keypad.kstar = 0;
1157   2              }
1158   1              kCol1 = 1;
1159   1              
1160   1              // column 2
1161   1              kCol2 = 0;
1162   1              latchKeypad();
1163   1              
1164   1              if (kRow1 == 0) {
1165   2                      keypad.k2 = 1;
1166   2              }
1167   1              else {
1168   2                      keypad.k2 = 0;
1169   2              }
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     09/29/2017 16:18:10 PAGE 20  

1170   1              if (kRow2 == 0) {
1171   2                      keypad.k5 = 1;
1172   2              }
1173   1              else {
1174   2                      keypad.k5 = 0;
1175   2              }
1176   1              if (kRow3 == 0) {
1177   2                      keypad.k8 = 1;
1178   2              }
1179   1              else {
1180   2                      keypad.k8 = 0;
1181   2              }
1182   1              if (kRow4 == 0) {
1183   2                      keypad.k0 = 1;
1184   2              }
1185   1              else {
1186   2                      keypad.k0 = 0;
1187   2              }
1188   1              kCol2 = 1;
1189   1              
1190   1              // column 3
1191   1              kCol3 = 0;
1192   1              latchKeypad();
1193   1              
1194   1              if (kRow1 == 0) {
1195   2                      keypad.k3 = 1;
1196   2              }
1197   1              else {
1198   2                      keypad.k3 = 0;
1199   2              }
1200   1              if (kRow2 == 0) {
1201   2                      keypad.k6 = 1;
1202   2              }
1203   1              else {
1204   2                      keypad.k6 = 0;
1205   2              }
1206   1              if (kRow3 == 0) {
1207   2                      keypad.k9 = 1;
1208   2              }
1209   1              else {
1210   2                      keypad.k9 = 0;
1211   2              }
1212   1              if (kRow4 == 0) {
1213   2                      keypad.kpound = 1;
1214   2              }
1215   1              else {
1216   2                      keypad.kpound = 0;
1217   2              }
1218   1              kCol3 = 1;
1219   1              
1220   1              // column 4
1221   1              kCol4 = 0;
1222   1              latchKeypad();
1223   1              
1224   1              if (kRow1 == 0) {
1225   2                      keypad.kA = 1;
1226   2              }
1227   1              else {
1228   2                      keypad.kA = 0;
1229   2              }
1230   1              if (kRow2 == 0) {
1231   2                      keypad.kB = 1;
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     09/29/2017 16:18:10 PAGE 21  

1232   2              }
1233   1              else {
1234   2                      keypad.kB = 0;
1235   2              }
1236   1              if (kRow3 == 0) {
1237   2                      keypad.kC = 1;
1238   2              }
1239   1              else {
1240   2                      keypad.kC = 0;
1241   2              }
1242   1              if (kRow4 == 0) {
1243   2                      keypad.kD = 1;
1244   2              }
1245   1              else {
1246   2                      keypad.kD = 0;
1247   2              }
1248   1              kCol4 = 1;
1249   1              latchKeypad();
1250   1              
1251   1              // disable keypad latch output
1252   1              //oe_keypad = 1;
1253   1              missionControl1( ctrl_off );
1254   1              
1255   1              return keypad; 
1256   1              
1257   1      } // end getKeysPressed()
1258          
1259          // -------------------------------------------------------------- //
1260          
1261          void displayKeyPressed( struct keypad_data keypad ) {
1262   1              
1263   1              if ( keypad.k1 == 1 ) {
1264   2                      outputSevenSeg('1');
1265   2              }
1266   1              else if ( keypad.k2 == 1 ) {
1267   2                      outputSevenSeg('2');
1268   2              }
1269   1              else if ( keypad.k3 == 1 ) {
1270   2                      outputSevenSeg('3');
1271   2              }
1272   1              else if ( keypad.k4 == 1 ) {
1273   2                      outputSevenSeg('4');
1274   2              }
1275   1              else if ( keypad.k5 == 1 ) {
1276   2                      outputSevenSeg('5');
1277   2              }
1278   1              else if ( keypad.k6 == 1 ) {
1279   2                      outputSevenSeg('6');
1280   2              }
1281   1              else if ( keypad.k7 == 1 ) {
1282   2                      outputSevenSeg('7');
1283   2              }
1284   1              else if ( keypad.k8 == 1 ) {
1285   2                      outputSevenSeg('8');
1286   2              }
1287   1              else if ( keypad.k9 == 1 ) {
1288   2                      outputSevenSeg('9');
1289   2              }
1290   1              else if ( keypad.kA == 1 ) {
1291   2                      outputSevenSeg('A');
1292   2              }
1293   1              else if ( keypad.k0 == 1 ) {
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     09/29/2017 16:18:10 PAGE 22  

1294   2                      outputSevenSeg('0');
1295   2              }
1296   1              else if ( keypad.kB == 1 ) {
1297   2                      outputSevenSeg('b');
1298   2              }
1299   1              else if ( keypad.kC == 1 ) {
1300   2                      outputSevenSeg('C');
1301   2              }
1302   1              else if ( keypad.kD == 1 ) {
1303   2                      outputSevenSeg('d');
1304   2              }
1305   1              else if ( keypad.kstar == 1 ) {
1306   2                      outputSevenSeg('.');
1307   2              }
1308   1              else if ( keypad.kpound == 1 ) {
1309   2                      outputSevenSeg('-');
1310   2              }
1311   1              else {
1312   2                      outputSevenSeg('o');
1313   2              }
1314   1              
1315   1      } // end displayKeyPressed()
1316          // -------------------------------------------------------------- //
1317          
1318          void lcdCmd( byte cmd ) {
1319   1              
1320   1              //rs_lcd = 0;                   // reg select low for command
1321   1              // --- RW tied low for write --- //
1322   1              //e_lcd = 1;                    // E high for pulse
1323   1              
1324   1              missionControl1( ctrl_lcd_cmd_start );
1325   1              
1326   1              lcdPort = cmd;
1327   1              //latchLCD();
1328   1              
1329   1              msDelay(1);                     // Need Tpw > 140 ns
1330   1              //e_lcd = 0;                    // E low to end pulse
1331   1              
1332   1              missionControl1( ctrl_lcd_cmd_finish );
1333   1              
1334   1      } // end lcdCmd()
1335          
1336          // -------------------------------------------------------------- //
1337          
1338          void lcdData( byte dat ) {
1339   1              
1340   1              //rs_lcd = 1;                   // reg select high for data
1341   1              // --- RW tied low for write --- //
1342   1              //e_lcd = 1;                    // E high for pulse
1343   1              
1344   1              missionControl1( ctrl_lcd_data_start );
1345   1              
1346   1              lcdPort = dat;
1347   1              //latchLCD();
1348   1              
1349   1              msDelay(1);                     // Need Tpw > 140 ns
1350   1              //e_lcd = 0;                    // E low to end pulse
1351   1              
1352   1              missionControl1( ctrl_lcd_data_finish );
1353   1              
1354   1      } // end lcdData()
1355          
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     09/29/2017 16:18:10 PAGE 23  

1356          // -------------------------------------------------------------- //
1357          
1358          void lcdInit( void ) {  
1359   1              
1360   1              msDelay(50);
1361   1              lcdCmd(0x38);                   // Function set
1362   1              msDelay(5);
1363   1              lcdCmd(0x38);                   // Function set
1364   1              msDelay(1);
1365   1              lcdCmd(0x0F);                   // Display ON/OFF control
1366   1              msDelay(1);
1367   1              lcdCmd(0x01);                   // Clear display
1368   1              msDelay(2);
1369   1              
1370   1      } // end lcdInit()
1371          
1372          // -------------------------------------------------------------- //
1373          
1374          void lcdClear( void ) {
1375   1              
1376   1              lcdCmd(0x01);                   // Clear display
1377   1              msDelay(2);
1378   1              
1379   1      } // end lcdClear()
1380          
1381          // -------------------------------------------------------------- //
1382          
1383          void lcdChar( byte character ) {
1384   1              
1385   1              lcdData(character);             // send character
1386   1              
1387   1      } // end lcdChar()
1388          
1389          // -------------------------------------------------------------- //
1390          
1391          void lcdString( volatile char *string ) {
1392   1              
1393   1              int i = 0;
1394   1              while( string[i] != '`') {
1395   2                      lcdChar( string[i] );
1396   2                      i++;
1397   2              }
1398   1              
1399   1      } // end lcdString()
1400          
1401          // -------------------------------------------------------------- //
1402          
1403          void lcdLine( int line ) {
1404   1              
1405   1              switch (line) {
1406   2                      case 1: {
1407   3                              lcdCmd(0x80);
1408   3                              break;
1409   3                      }
1410   2                      case 2: {
1411   3                              lcdCmd(0xC0);
1412   3                              break;
1413   3                      }
1414   2                      case 3: {
1415   3                              lcdCmd(0x94);
1416   3                              break;
1417   3                      }
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     09/29/2017 16:18:10 PAGE 24  

1418   2                      case 4: {
1419   3                              lcdCmd(0xD4);
1420   3                              break;
1421   3                      }
1422   2                      default:
1423   2                              lcdCmd(0x80);
1424   2                      
1425   2              } // end switch
1426   1              
1427   1      } // end lcdLine()
1428          
1429          // -------------------------------------------------------------- //
1430          
1431          void lcdHexWord( word hex ) {
1432   1      
1433   1              char hexStr[] = "--------`";
1434   1      
1435   1              sprintf( hexStr, "%04X`", (int)hex );
1436   1              lcdString( &hexStr );
1437   1      
1438   1      } // end lcdHexWord()
1439          
1440          // -------------------------------------------------------------- //
1441          
1442          void lcdHexByte( byte hex ) {
1443   1      
1444   1              char hexStr[] = "-----`";
1445   1      
1446   1              sprintf( hexStr, "%02X`", (int)hex );
1447   1              lcdString( &hexStr );
1448   1      
1449   1      } // end lcdHexWord()
1450          
1451          // -------------------------------------------------------------- //
1452          
1453          void lcdAsciiByte( byte hex ) {
1454   1      
1455   1      //      char hexStr[] = "-----`";
1456   1      //
1457   1      //      sprintf( hexStr, "%1c`", (int)hex );
1458   1      //      lcdString( &hexStr );
1459   1      
1460   1              lcdChar( hex );
1461   1      
1462   1      } // end lcdHexWord()
1463          
1464          // -------------------------------------------------------------- //
1465          
1466          void missionControl1( int dec ) {
1467   1              
1468   1              switch ( dec ) {
1469   2                      
1470   2                      // The MSB is changed first to avoid false triggers of the LCD enable
1471   2                      // line as the enable line never goes high when the MSB is low.
1472   2                      case ctrl_off: {
1473   3                              dec2 = 0;
1474   3                              dec1 = 0;
1475   3                              dec0 = 0;
1476   3                              break;
1477   3                      }
1478   2                      case ctrl_ss_latch: {
1479   3                              dec2 = 0;
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     09/29/2017 16:18:10 PAGE 25  

1480   3                              dec1 = 0;
1481   3                              dec0 = 1;
1482   3                              break;
1483   3                      }
1484   2                      case ctrl_kp_oe: {
1485   3                              dec2 = 0;
1486   3                              dec1 = 1;
1487   3                              dec0 = 0;
1488   3                              break;
1489   3                      }
1490   2                      case ctrl_kp_oelatch: {
1491   3                              dec2 = 0;
1492   3                              dec1 = 1;
1493   3                              dec0 = 1;
1494   3                              break;
1495   3                      }
1496   2                      case ctrl_lcd_cmd_start: {
1497   3                              dec2 = 1;
1498   3                              dec1 = 0;
1499   3                              dec0 = 0;
1500   3                              break;
1501   3                      }
1502   2                      case ctrl_lcd_cmd_finish: {
1503   3                              dec2 = 1;
1504   3                              dec1 = 0;
1505   3                              dec0 = 1;
1506   3                              break;
1507   3                      }
1508   2                      case ctrl_lcd_data_start: {
1509   3                              dec2 = 1;
1510   3                              dec1 = 1;
1511   3                              dec0 = 0;
1512   3                              break;
1513   3                      }
1514   2                      case ctrl_lcd_data_finish: {
1515   3                              dec2 = 1;
1516   3                              dec1 = 1;
1517   3                              dec0 = 1;
1518   3                              break;
1519   3                      }               
1520   2              } // end switch
1521   1              
1522   1      } // end missionControl1()
1523          
1524          // -------------------------------------------------------------- //
1525          
1526          void missionControl2( int dec ) {
1527   1              
1528   1              switch ( dec ) {
1529   2                      case ctrl_off: {
1530   3                              dec4 = 0;
1531   3                              dec3 = 0;
1532   3                              dec5 = 0;
1533   3                              break;
1534   3                      }
1535   2                      case ctrl_adc_start: {
1536   3                              dec4 = 0;
1537   3                              dec3 = 1;
1538   3                              dec5 = 0;
1539   3                              break;
1540   3                      }
1541   2                      case ctrl_rtc_rd: {
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     09/29/2017 16:18:10 PAGE 26  

1542   3                              dec4 = 1;
1543   3                              dec3 = 0;
1544   3                              dec5 = 0;
1545   3                              break;
1546   3                      }
1547   2                      case ctrl_adc_finish: {
1548   3                              dec4 = 1;
1549   3                              dec3 = 1;
1550   3                              dec5 = 0;
1551   3                              break;
1552   3                      }
1553   2                      case ctrl_rtc_cs1: {
1554   3                              dec4 = 0;
1555   3                              dec3 = 0;
1556   3                              dec5 = 1;
1557   3                              break;
1558   3                      }
1559   2                      // not used
1560   2      //              case ctrl_rtc_cs0: {
1561   2      //                      dec5 = 1;
1562   2      //                      dec4 = 0;
1563   2      //                      dec3 = 1;
1564   2      //                      break;
1565   2      //              }
1566   2                      case ctrl_rtc_cs0: {
1567   3                              dec4 = 1;
1568   3                              dec3 = 0;
1569   3                              dec5 = 1;
1570   3                              break;
1571   3                      }
1572   2                      case ctrl_rtc_wr: {
1573   3                              dec4 = 1;
1574   3                              dec3 = 1;
1575   3                              dec5 = 1;
1576   3                              break;
1577   3                      }               
1578   2              } // end switch
1579   1              
1580   1      } // end missionControl2()
1581          
1582          // -------------------------------------------------------------- //
1583          
1584          void msDelay( unsigned msecs ) {
1585   1              
1586   1              unsigned i;
1587   1              unsigned char j;
1588   1              
1589   1              msecs = msecs * 3.23;
1590   1              
1591   1              for(i=0;i<msecs;i++){
1592   2                      for(j=0;j<100;j++);
1593   2              }
1594   1              
1595   1      } // end msDelay()
1596          
1597          // -------------------------------------------------------------- //
1598          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   5159    ----
   CONSTANT SIZE    =    746    ----
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     09/29/2017 16:18:10 PAGE 27  

   XDATA SIZE       =   ----     977
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
