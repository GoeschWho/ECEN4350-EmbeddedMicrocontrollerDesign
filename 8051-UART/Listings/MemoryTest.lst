C51 COMPILER V9.56.0.0   MEMORYTEST                                                        03/13/2017 17:45:02 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE MEMORYTEST
OBJECT MODULE PLACED IN .\Objects\MemoryTest.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE MemoryTest.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listing
                    -s\MemoryTest.lst) TABS(2) OBJECT(.\Objects\MemoryTest.obj)

line level    source

   1          #include <REGX55.H>
   2          #include <stdio.h>
   3          
   4          // P1
   5          //sfr P1 = 0x90;
   6          //sbit P1_0 = P1^0;
   7          //sbit P1_1 = P1^1;
   8          //sbit P1_2 = P1^2;
   9          //sbit P1_3 = P1^3;
  10          //sbit P1_4 = P1^4;
  11          //sbit P1_5 = P1^5;
  12          //sbit P1_6 = P1^6;
  13          //sbit P1_7 = P1^7;
  14          
  15          // Prototypes
  16          
  17          typedef unsigned char datum;    /* Set the data bus width to 8 bits.  */
  18          datum memTestDataBus(volatile datum * address);
  19          datum * memTestAddressBus(volatile datum * baseAddress, unsigned long nBytes);
  20          
  21          // Main
  22          
  23          void main(void) {
  24   1        
  25   1        P1 = 0x00;
  26   1        
  27   1          while(1) {
  28   2            P1 = ~P1;
  29   2          }
  30   1        
  31   1        while(1); // Stay off the streets
  32   1        
  33   1      } // end main()
  34          
  35          
  36          
  37          
  38          
  39          
  40          /**********************************************************************
  41           *
  42           * Function:    memTestDataBus()
  43           *
  44           * Description: Test the data bus wiring in a memory region by
  45           *              performing a walking 1's test at a fixed address
  46           *              within that region.  The address (and hence the
  47           *              memory region) is selected by the caller.
  48           *
  49           * Notes:       
  50           *
  51           * Returns:     0 if the test succeeds.  
  52           *              A non-zero result is the first pattern that failed.
  53           *
  54           **********************************************************************/
C51 COMPILER V9.56.0.0   MEMORYTEST                                                        03/13/2017 17:45:02 PAGE 2   

  55          datum memTestDataBus(volatile datum * address)
  56          {
  57   1          datum pattern;
  58   1      
  59   1      
  60   1          /*
  61   1           * Perform a walking 1's test at the given address.
  62   1           */
  63   1          for (pattern = 1; pattern != 0; pattern <<= 1)
  64   1          {
  65   2              /*
  66   2               * Write the test pattern.
  67   2               */
  68   2              *address = pattern;
  69   2      
  70   2              /*
  71   2               * Read it back (immediately is okay for this test).
  72   2               */
  73   2              if (*address != pattern) 
  74   2              {
  75   3                  return (pattern);
  76   3              }
  77   2          }
  78   1      
  79   1          return (0);
  80   1      
  81   1      }   /* memTestDataBus() */
  82          
  83          
  84          /**********************************************************************
  85           *
  86           * Function:    memTestAddressBus()
  87           *
  88           * Description: Test the address bus wiring in a memory region by
  89           *              performing a walking 1's test on the relevant bits
  90           *              of the address and checking for aliasing. This test
  91           *              will find single-bit address failures such as stuck
  92           *              -high, stuck-low, and shorted pins.  The base address
  93           *              and size of the region are selected by the caller.
  94           *
  95           * Notes:       For best results, the selected base address should
  96           *              have enough LSB 0's to guarantee single address bit
  97           *              changes.  For example, to test a 64-Kbyte region, 
  98           *              select a base address on a 64-Kbyte boundary.  Also, 
  99           *              select the region size as a power-of-two--if at all 
 100           *              possible.
 101           *
 102           * Returns:     NULL if the test succeeds.  
 103           *              A non-zero result is the first address at which an
 104           *              aliasing problem was uncovered.  By examining the
 105           *              contents of memory, it may be possible to gather
 106           *              additional information about the problem.
 107           *
 108           **********************************************************************/
 109          datum * memTestAddressBus(volatile datum * baseAddress, unsigned long nBytes)
 110          {
 111   1          unsigned long addressMask = (nBytes/sizeof(datum) - 1);
 112   1          unsigned long offset;
 113   1          unsigned long testOffset;
 114   1      
 115   1          datum pattern     = (datum) 0xAAAAAAAA;
 116   1          datum antipattern = (datum) 0x55555555;
C51 COMPILER V9.56.0.0   MEMORYTEST                                                        03/13/2017 17:45:02 PAGE 3   

 117   1      
 118   1      
 119   1          /*
 120   1           * Write the default pattern at each of the power-of-two offsets.
 121   1           */
 122   1          for (offset = 1; (offset & addressMask) != 0; offset <<= 1)
 123   1          {
 124   2              baseAddress[offset] = pattern;
 125   2          }
 126   1      
 127   1          /* 
 128   1           * Check for address bits stuck high.
 129   1           */
 130   1          testOffset = 0;
 131   1          baseAddress[testOffset] = antipattern;
 132   1      
 133   1          for (offset = 1; (offset & addressMask) != 0; offset <<= 1)
 134   1          {
 135   2              if (baseAddress[offset] != pattern)
 136   2              {
 137   3                  return ((datum *) &baseAddress[offset]);
 138   3              }
 139   2          }
 140   1      
 141   1          baseAddress[testOffset] = pattern;
 142   1      
 143   1          /*
 144   1           * Check for address bits stuck low or shorted.
 145   1           */
 146   1          for (testOffset = 1; (testOffset & addressMask) != 0; testOffset <<= 1)
 147   1          {
 148   2              baseAddress[testOffset] = antipattern;
 149   2      
 150   2          if (baseAddress[0] != pattern)
 151   2          {
 152   3            return ((datum *) &baseAddress[testOffset]);
 153   3          }
 154   2      
 155   2              for (offset = 1; (offset & addressMask) != 0; offset <<= 1)
 156   2              {
 157   3                  if ((baseAddress[offset] != pattern) && (offset != testOffset))
 158   3                  {
 159   4                      return ((datum *) &baseAddress[testOffset]);
 160   4                  }
 161   3              }
 162   2      
 163   2              baseAddress[testOffset] = pattern;
 164   2          }
 165   1      
 166   1          return (0);
 167   1      
 168   1      }   /* memTestAddressBus() */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    536    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      21
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
C51 COMPILER V9.56.0.0   MEMORYTEST                                                        03/13/2017 17:45:02 PAGE 4   

END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
